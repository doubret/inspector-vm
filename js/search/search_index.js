var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.2","fields":["title","body"],"fieldVectors":[["title/classes/SpaceHistory.html",[0,0.123,1,1.229]],["body/classes/SpaceHistory.html",[0,0.168,1,2.01,2,0.6,3,0.763,4,0.321,5,0.891,6,0.6,7,1.379,8,2.335,9,1.488,10,1.687,11,1.27,12,0.6,13,0.401,14,0.929,15,1.843,16,2.36,17,2.36,18,3.361,19,2.36,20,0.6,21,1.713,22,1.752,23,1.384,24,2.221,25,1.137,26,0.934,27,0.6,28,0.079,29,1.137,30,1.505,31,0.6,32,2.699,33,1.435,34,1.713,35,2.096,36,1.435,37,2.172,38,1.435,39,1.555,40,0.934,41,1.359,42,0.6,43,1.137,44,1.137,45,0.401,46,1.379,47,1.107,48,1.28,49,1.859,50,1.577,51,1.107,52,0.974,53,1.107,54,1.107,55,1.107,56,1.107,57,1.107,58,1.107,59,1.107,60,1.107,61,1.107,62,1.107,63,1.107,64,1.107,65,1.107,66,1.107,67,1.107,68,1.527,69,0.6,70,1.899,71,0.493,72,1.843,73,0.929,74,0.929,75,1.051,76,0.6,77,1.851,78,1.107,79,1.107,80,1.107,81,1.107,82,2.36,83,1.107,84,1.107,85,1.107,86,1.107,87,1.107,88,1.107,89,1.107,90,0.891,91,1.107,92,1.107,93,1.107,94,1.107,95,1.107,96,1.713,97,1.107,98,1.107,99,1.713,100,1.107,101,1.107,102,1.107,103,1.107,104,0.6,105,0.729,106,0.729,107,1.129,108,1.107,109,0.729,110,1.107,111,0.6,112,1.713,113,0.891,114,0.6,115,0.6,116,1.107,117,1.107,118,1.107,119,1.107,120,1.107,121,1.107,122,1.107,123,1.107,124,1.107,125,1.107,126,1.464,127,1.107,128,1.107,129,1.107,130,1.107,131,1.107,132,1.107,133,1.107,134,1.107,135,1.107,136,1.107,137,1.051,138,1.107,139,1.107,140,1.107,141,1.107,142,1.107,143,1.107,144,1.107,145,1.107,146,1.107,147,1.107,148,1.107,149,1.107,150,1.107,151,1.107,152,1.107,153,1.107,154,1.107,155,1.107,156,1.107,157,1.107,158,0.929,159,0.6,160,1.28,161,1.107,162,0.621,163,1.28,164,0.6,165,0.6,166,0.6,167,0.6,168,0.934,169,0.6,170,0.6,171,0.6,172,1.107,173,1.107,174,1.107,175,1.107,176,1.107,177,1.107,178,1.107,179,1.107,180,2.096,181,1.107,182,1.107,183,1.107,184,1.107,185,0.929,186,0.929,187,0.6,188,0.6,189,1.107,190,1.107,191,1.107,192,1.107,193,1.107,194,1.107,195,1.107,196,1.107,197,1.107,198,1.107,199,1.107,200,1.107,201,0.6,202,0.6,203,0.6,204,0.6,205,1.107,206,1.107,207,1.107,208,1.107,209,1.107,210,1.107,211,1.107,212,1.107,213,1.107,214,1.107,215,1.107,216,1.107,217,0.036,218,0.036]],["title/classes/V8EventLoop.html",[0,0.123,219,1.501]],["body/classes/V8EventLoop.html",[0,0.153,2,0.715,3,0.872,4,0.382,6,0.715,8,1.903,9,1.397,11,1.309,12,0.715,13,0.478,14,1.061,15,1.879,20,0.715,22,1.879,23,1.756,25,1.061,26,0.872,27,1.495,28,0.079,29,1.46,30,1.442,31,1.495,40,0.872,41,1.368,42,0.715,43,1.4,44,1.4,45,0.478,48,1.061,49,1.756,50,1.622,52,0.567,68,1.813,69,1.061,71,0.872,73,1.265,74,1.265,75,1.368,76,1.061,77,1.84,90,1.062,104,1.567,105,1.289,106,2.134,107,1.701,109,2.023,111,1.061,114,0.715,115,0.715,126,0.715,137,1.039,158,1.567,159,1.061,160,1.701,162,0.935,163,1.756,164,1.4,165,0.715,166,0.715,167,1.4,168,1.228,169,1.061,170,1.061,171,0.715,185,1.4,186,1.4,187,1.061,188,0.715,201,1.061,202,1.061,203,1.061,204,0.715,217,0.041,218,0.041,219,2.73,220,1.319,221,2.525,222,4.067,223,3.347,224,1.289,225,1.289,226,2.538,227,1.289,228,1.289,229,2.538,230,1.71,231,2.538,232,3.575,233,1.957,234,0.588,235,1.71,236,1.71,237,1.71,238,1.71,239,2.538,240,1.71,241,1.957,242,1.575,243,1.71,244,1.71,245,1.71,246,1.319,247,1.319,248,1.71,249,1.71,250,1.319,251,1.71,252,1.71,253,1.575,254,1.71,255,1.71,256,1.957,257,1.71,258,1.71,259,1.71,260,1.71,261,1.319,262,1.71,263,1.71,264,1.71,265,1.71,266,1.71,267,1.71,268,1.71,269,1.71,270,1.71,271,1.71]],["title/classes/V8GCMetrics.html",[0,0.123,272,1.229]],["body/classes/V8GCMetrics.html",[0,0.141,2,0.625,3,0.787,4,0.334,6,0.625,7,1.422,9,1.435,11,1.295,12,0.625,13,0.417,14,0.958,15,1.844,20,0.625,22,1.844,23,1.766,25,0.958,26,0.787,27,1.307,28,0.079,29,1.397,30,1.497,31,1.307,40,0.957,41,1.312,42,0.625,43,1.307,44,1.307,45,0.417,48,0.958,49,1.766,50,1.488,52,0.909,68,1.766,69,0.958,71,0.787,73,1.165,74,1.165,75,1.312,76,0.958,77,1.9,104,1.914,111,0.958,114,0.625,115,0.625,126,0.625,137,1.073,158,1.488,159,0.958,160,1.598,162,0.873,163,1.672,164,1.307,165,0.625,166,0.625,167,1.307,168,1.158,169,0.958,170,0.958,171,0.625,185,1.307,186,1.307,187,0.958,188,0.625,201,0.958,202,0.958,203,0.958,204,0.625,217,0.037,218,0.037,221,0.927,224,1.164,225,1.164,227,1.164,228,1.164,234,0.513,250,1.152,272,2.228,273,0.927,274,1.844,275,3.124,276,3.124,277,3.124,278,3.124,279,3.124,280,3.917,281,2.29,282,1.493,283,3.288,284,3.37,285,2.29,286,2.29,287,2.29,288,1.493,289,2.29,290,2.29,291,1.493,292,2.786,293,1.493,294,1.493,295,2.786,296,1.493,297,2.29,298,1.767,299,1.493,300,1.493,301,1.493,302,1.493,303,1.493,304,1.493,305,1.493,306,3.556,307,1.152,308,0.927,309,1.493,310,3.37,311,3.37,312,1.493,313,1.493,314,1.493,315,1.493,316,1.493,317,1.493,318,1.493,319,1.493,320,1.493,321,1.493,322,1.493,323,1.493,324,1.493,325,1.493,326,1.493,327,1.493,328,1.493,329,1.493,330,1.493,331,1.493,332,1.493,333,1.493,334,1.493,335,3.37,336,1.493,337,1.493,338,3.37,339,1.493,340,1.493,341,1.493,342,1.493,343,1.493,344,1.493,345,1.493,346,1.493,347,1.493,348,1.493,349,1.493,350,1.493,351,1.493,352,1.493,353,1.493,354,1.493,355,1.493,356,1.493,357,1.493,358,1.493,359,1.493,360,1.493,361,1.493,362,1.493]],["title/classes/V8MemoryMetrics.html",[0,0.123,72,1.012]],["body/classes/V8MemoryMetrics.html",[0,0.153,1,1.79,2,0.494,3,0.654,4,0.264,5,0.733,6,0.494,7,0.733,8,2.322,9,1.527,10,1.869,11,1.279,12,0.494,13,0.33,14,0.797,15,1.825,16,0.911,17,0.911,18,3.249,19,0.911,20,0.494,21,0.911,22,1.797,23,1.748,25,1.001,26,0.822,27,1.148,28,0.079,29,1.311,30,1.527,31,1.148,32,2.322,34,0.911,35,1.846,37,2.257,39,1.53,40,0.822,41,1.377,42,0.494,43,1.148,44,1.148,45,0.33,46,1.182,47,0.911,48,1.148,49,1.807,50,1.473,51,0.911,52,0.986,53,0.911,54,0.911,55,0.911,56,0.911,57,0.911,58,0.911,59,0.911,60,0.911,61,0.911,62,0.911,63,0.911,64,0.911,65,0.911,66,0.911,67,0.911,68,1.677,69,0.797,70,2.186,71,0.654,72,1.807,73,1.001,74,1.001,75,1.21,76,0.797,77,1.918,78,1.469,79,1.469,80,1.469,81,1.469,82,2.717,83,2.117,84,1.469,85,1.469,86,2.117,87,1.469,88,2.117,89,1.469,90,1.182,91,1.469,92,2.117,93,1.469,94,2.117,95,1.469,96,2.117,97,2.117,98,1.469,99,2.117,100,2.117,101,1.469,102,2.117,103,1.469,104,0.797,105,0.968,106,0.968,107,1.395,108,2.117,109,1.216,110,0.911,111,0.797,112,2.117,113,0.733,114,0.494,115,0.494,116,0.911,117,0.911,118,0.911,119,0.911,120,0.911,121,0.911,122,0.911,123,0.911,124,0.911,125,0.911,126,1.346,127,0.911,128,0.911,129,0.911,130,0.911,131,0.911,132,0.911,133,0.911,134,0.911,135,0.911,136,0.911,137,0.943,138,0.911,139,0.911,140,0.911,141,0.911,142,0.911,143,0.911,144,0.911,145,0.911,146,0.911,147,0.911,148,0.911,149,0.911,150,0.911,151,0.911,152,0.911,153,0.911,154,0.911,155,0.911,156,0.911,157,0.911,158,1.346,159,0.797,160,1.473,161,0.911,162,0.767,163,1.562,164,1.148,165,0.494,166,0.494,167,1.148,168,1.034,169,0.797,170,0.797,171,0.494,172,0.911,173,0.911,174,0.911,175,0.911,176,0.911,177,0.911,178,0.911,179,0.911,180,1.846,181,0.911,182,0.911,183,0.911,184,0.911,185,1.148,186,1.148,187,0.797,188,0.494,189,0.911,190,0.911,191,0.911,192,0.911,193,0.911,194,0.911,195,0.911,196,0.911,197,0.911,198,0.911,199,0.911,200,0.911,201,0.797,202,0.797,203,0.797,204,0.494,205,0.911,206,0.911,207,0.911,208,0.911,209,0.911,210,0.911,211,0.911,212,0.911,213,0.911,214,0.911,215,0.911,216,0.911,217,0.031,218,0.031,224,0.968,225,0.968,227,0.968,228,0.968,234,1.283,363,1.904,364,1.181,365,1.181,366,1.181,367,1.181,368,1.181,369,1.181,370,1.181,371,1.181,372,1.181,373,1.181,374,1.181,375,1.181,376,1.181,377,1.181,378,1.181,379,1.181]],["title/classes/V8ProcessMetrics.html",[0,0.123,380,1.501]],["body/classes/V8ProcessMetrics.html",[0,0.135,2,0.581,3,0.744,4,0.31,6,0.581,8,1.948,9,1.412,11,1.287,12,0.581,13,0.388,14,0.906,15,1.824,20,0.581,22,1.824,23,1.813,25,0.906,26,0.744,27,1.257,28,0.079,29,1.371,30,1.498,31,1.257,37,1.866,40,0.744,41,1.281,42,0.581,43,1.257,44,1.257,45,0.388,48,0.906,49,1.758,50,1.444,52,0.771,68,1.74,69,0.906,71,0.744,73,1.113,74,1.113,75,1.281,76,0.906,77,1.943,104,1.444,105,1.1,106,2.029,107,1.527,109,1.1,111,0.906,113,0.862,114,0.581,115,0.581,126,0.581,137,1.186,158,1.444,159,0.906,160,1.697,162,0.84,163,1.74,164,1.257,165,0.581,166,0.581,167,1.257,168,1.119,169,0.906,170,0.906,171,0.581,185,1.257,186,1.257,187,0.906,188,0.581,201,0.906,202,0.906,203,0.906,204,0.581,217,0.035,218,0.035,224,1.1,225,1.1,227,1.1,228,1.1,233,2.053,234,0.477,246,1.071,247,1.071,253,1.344,256,1.67,261,1.071,298,2.663,380,2.706,381,1.071,382,3.006,383,3.006,384,3.006,385,3.006,386,3.006,387,3.006,388,3.006,389,3.006,390,3.006,391,3.006,392,2.165,393,1.388,394,3.919,395,3.453,396,2.661,397,3.006,398,1.388,399,2.661,400,4.111,401,1.388,402,3.992,403,3.259,404,2.877,405,1.388,406,1.388,407,3.006,408,3.006,409,2.165,410,2.165,411,1.388,412,1.388,413,1.388,414,1.388,415,1.388,416,1.388,417,1.388,418,1.388,419,1.388,420,1.388,421,1.388,422,1.388,423,1.388,424,2.661,425,2.661,426,2.661,427,1.388,428,1.388,429,1.388,430,1.388,431,1.388,432,1.388,433,1.388,434,1.388,435,1.388,436,1.388,437,1.388,438,1.388,439,1.388,440,1.388,441,1.388,442,1.388,443,1.388,444,1.388,445,1.388,446,1.388,447,1.388,448,1.388,449,1.388,450,1.388,451,1.388,452,1.388,453,1.388,454,1.388,455,1.388,456,1.388,457,1.388,458,1.388,459,1.388,460,1.388,461,2.165,462,2.165,463,1.388,464,1.388,465,1.388,466,1.388,467,2.165,468,1.388,469,1.388,470,1.388,471,1.388,472,2.165,473,1.388,474,1.388,475,1.388,476,1.388,477,1.388,478,1.388]],["title/coverage.html",[479,2.012]],["body/coverage.html",[0,0.229,1,1.742,4,0.766,5,2.507,28,0.076,30,1.178,52,0.766,72,1.434,217,0.066,218,0.066,219,2.128,220,2.644,272,1.742,273,2.507,274,1.434,380,2.128,381,2.644,479,2.128,480,2.644,481,3.429,482,2.644,483,4.434,484,3.429,485,3.429,486,2.128,487,2.644,488,3.429,489,3.429,490,3.429,491,2.644,492,3.429,493,2.644,494,2.644]],["title/dependencies.html",[495,2.05,496,2.232]],["body/dependencies.html",[3,1.248,11,1.015,28,0.075,41,1.248,45,1.015,217,0.068,218,0.068,274,1.52,308,2.255,496,2.803,497,3.634,498,3.634,499,3.634,500,3.634]],["title/index.html",[13,0.573,162,0.573,242,1.272]],["body/index.html",[10,1.95,11,1.234,26,1.079,28,0.078,29,1.079,39,1.597,40,1.317,45,1.203,46,1.95,52,0.856,70,2.379,71,1.317,72,1.603,75,1.079,137,1.421,168,1.079,217,0.062,218,0.062,234,1.079,241,2.423,272,1.948,274,1.603,283,2.423,404,2.423,501,4.307,502,3.142,503,3.833,504,3.142,505,3.142,506,3.142,507,3.142,508,3.142,509,3.142,510,3.833,511,3.833,512,4.136,513,3.833,514,3.142,515,3.833,516,3.142,517,3.142,518,3.142,519,3.142,520,3.142,521,3.142,522,3.142,523,3.142,524,3.142,525,3.142,526,3.142,527,3.142,528,3.142,529,2.423]],["title/license.html",[162,0.573,242,1.272,530,1.581]],["body/license.html",[4,0.707,28,0.063,39,1.956,217,0.063,218,0.063,221,1.963,480,2.44,529,2.44,530,2.44,531,4.149,532,3.163,533,3.163,534,3.849,535,3.163,536,3.163,537,3.163,538,3.163,539,3.849,540,3.163,541,4.317,542,4.629,543,3.163,544,3.849,545,4.149,546,3.163,547,4.149,548,3.849,549,3.163,550,3.163,551,3.163,552,3.163,553,3.163,554,3.163,555,3.163,556,3.163,557,3.163,558,3.163,559,3.163,560,3.163,561,3.163,562,3.163,563,3.849,564,3.849,565,3.163,566,3.163,567,3.163,568,3.849,569,3.163,570,3.163,571,3.163,572,3.163,573,3.163,574,3.163,575,3.163,576,3.163,577,3.163,578,3.163,579,3.163,580,3.163,581,3.163,582,3.163,583,3.163,584,3.163,585,3.163,586,3.163,587,3.163,588,3.163,589,3.163,590,3.163]],["title/modules.html",[591,2.501]],["body/modules.html",[28,0.069,217,0.069,218,0.069,591,2.875]],["title/overview.html",[592,2.501]],["body/overview.html",[0,0.188,28,0.069,217,0.069,218,0.069,592,2.864,593,3.713]],["title/unit-test.html",[594,2.015,595,2.015]],["body/unit-test.html",[4,0.774,28,0.077,52,0.774,217,0.066,218,0.066,253,2.151,479,2.151,482,2.674,487,2.674,491,3.135,493,2.674,494,2.674,594,2.674,595,2.674,596,3.466,597,3.466,598,4.065,599,3.466,600,3.466,601,3.466,602,3.466,603,3.466,604,3.466,605,3.466,606,4.065,607,3.466,608,3.466,609,3.466,610,3.466,611,3.466,612,3.466]],["title/miscellaneous/variables.html",[486,1.796,613,1.581]],["body/miscellaneous/variables.html",[9,1.251,13,1.017,28,0.072,217,0.068,218,0.068,234,1.251,273,2.26,274,1.841,307,2.808,308,2.26,486,2.26,613,2.808,614,3.641]]],"invertedIndex":[["",{"_index":28,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":487,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["0.5.9",{"_index":500,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":488,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":601,"title":{},"body":{"unit-test.html":{}}}],["1",{"_index":336,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["1.11.0",{"_index":498,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":497,"title":{},"body":{"dependencies.html":{}}}],["1/3",{"_index":609,"title":{},"body":{"unit-test.html":{}}}],["100",{"_index":483,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":113,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["12/12",{"_index":484,"title":{},"body":{"coverage.html":{}}}],["12/14",{"_index":611,"title":{},"body":{"unit-test.html":{}}}],["15",{"_index":345,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["15/15",{"_index":485,"title":{},"body":{"coverage.html":{}}}],["16/20",{"_index":492,"title":{},"body":{"coverage.html":{}}}],["19/19",{"_index":490,"title":{},"body":{"coverage.html":{}}}],["1e9",{"_index":269,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["2",{"_index":339,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["2017",{"_index":533,"title":{},"body":{"license.html":{}}}],["33",{"_index":608,"title":{},"body":{"unit-test.html":{}}}],["4",{"_index":341,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["48/60",{"_index":604,"title":{},"body":{"unit-test.html":{}}}],["49/61",{"_index":600,"title":{},"body":{"unit-test.html":{}}}],["5",{"_index":593,"title":{},"body":{"overview.html":{}}}],["500",{"_index":260,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["6/6",{"_index":489,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":343,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["8/9",{"_index":603,"title":{},"body":{"unit-test.html":{}}}],["80",{"_index":491,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["84",{"_index":606,"title":{},"body":{"unit-test.html":{}}}],["86",{"_index":610,"title":{},"body":{"unit-test.html":{}}}],["89",{"_index":602,"title":{},"body":{"unit-test.html":{}}}],["90/107",{"_index":612,"title":{},"body":{"unit-test.html":{}}}],["91/108",{"_index":607,"title":{},"body":{"unit-test.html":{}}}],["abov",{"_index":562,"title":{},"body":{"license.html":{}}}],["accordingli",{"_index":186,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["action",{"_index":584,"title":{},"body":{"license.html":{}}}],["activ",{"_index":395,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["activehandl",{"_index":382,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["activerequest",{"_index":383,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["alloc",{"_index":99,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["allrun",{"_index":275,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["and/or",{"_index":555,"title":{},"body":{"license.html":{}}}],["applic",{"_index":525,"title":{},"body":{"index.html":{}}}],["aris",{"_index":588,"title":{},"body":{"license.html":{}}}],["associ",{"_index":543,"title":{},"body":{"license.html":{}}}],["author",{"_index":577,"title":{},"body":{"license.html":{}}}],["avail",{"_index":34,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["availabel",{"_index":85,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["availables",{"_index":16,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["basemetr",{"_index":43,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["basic",{"_index":509,"title":{},"body":{"index.html":{}}}],["be",{"_index":254,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["between",{"_index":251,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["branch",{"_index":596,"title":{},"body":{"unit-test.html":{}}}],["break",{"_index":338,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["c",{"_index":532,"title":{},"body":{"license.html":{}}}],["callback",{"_index":297,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["case",{"_index":335,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["caus",{"_index":524,"title":{},"body":{"index.html":{}}}],["charg",{"_index":538,"title":{},"body":{"license.html":{}}}],["claim",{"_index":580,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"coverage.html":{},"overview.html":{}}}],["clock",{"_index":280,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["code",{"_index":91,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["collect",{"_index":7,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{}}}],["collector",{"_index":502,"title":{},"body":{"index.html":{}}}],["commit",{"_index":252,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["condit",{"_index":561,"title":{},"body":{"license.html":{}}}],["connect",{"_index":590,"title":{},"body":{"license.html":{}}}],["const",{"_index":137,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"index.html":{}}}],["constructor",{"_index":20,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["constructor(nam",{"_index":111,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["constructor(spacenam",{"_index":21,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["contain",{"_index":75,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"index.html":{}}}],["contract",{"_index":585,"title":{},"body":{"license.html":{}}}],["copi",{"_index":541,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":531,"title":{},"body":{"license.html":{}}}],["count",{"_index":397,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["coverag",{"_index":479,"title":{"coverage.html":{}},"body":{"coverage.html":{},"unit-test.html":{}}}],["cpu",{"_index":402,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["cpusystemusag",{"_index":384,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["cputotalusag",{"_index":385,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["cpuusag",{"_index":467,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["cpuusage.system",{"_index":473,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["cpuusage.us",{"_index":470,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["cpuuserusag",{"_index":386,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["creat",{"_index":25,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["damag",{"_index":581,"title":{},"body":{"license.html":{}}}],["data",{"_index":286,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["deal",{"_index":544,"title":{},"body":{"license.html":{}}}],["default",{"_index":234,"title":{},"body":{"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defaultreservoir",{"_index":305,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["defaultreservoir(1024",{"_index":311,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["defin",{"_index":23,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["delta",{"_index":265,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["delta[0",{"_index":268,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["delta[1",{"_index":270,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["depend",{"_index":496,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["descript",{"_index":6,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["differ",{"_index":80,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["distribut",{"_index":553,"title":{},"body":{"license.html":{}}}],["document",{"_index":480,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["durat",{"_index":250,"title":{},"body":{"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{}}}],["emitt",{"_index":287,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["event",{"_index":221,"title":{},"body":{"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"license.html":{}}}],["eventemitt",{"_index":284,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["eventlooplag",{"_index":223,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["exampl",{"_index":12,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["execut",{"_index":90,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8MemoryMetrics.html":{}}}],["export",{"_index":48,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["express",{"_index":570,"title":{},"body":{"license.html":{}}}],["extend",{"_index":73,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"coverage.html":{},"license.html":{},"unit-test.html":{}}}],["fit",{"_index":573,"title":{},"body":{"license.html":{}}}],["follow",{"_index":560,"title":{},"body":{"license.html":{}}}],["free",{"_index":537,"title":{},"body":{"license.html":{}}}],["function",{"_index":253,"title":{},"body":{"classes/V8EventLoop.html":{},"classes/V8ProcessMetrics.html":{},"unit-test.html":{}}}],["function(stat",{"_index":331,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["furnish",{"_index":558,"title":{},"body":{"license.html":{}}}],["garbag",{"_index":285,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["gaug",{"_index":79,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["gc",{"_index":274,"title":{},"body":{"classes/V8GCMetrics.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["gcmetric",{"_index":516,"title":{},"body":{"index.html":{}}}],["gcmetrics.stop",{"_index":527,"title":{},"body":{"index.html":{}}}],["get",{"_index":162,"title":{"index.html":{},"license.html":{}},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["getmetr",{"_index":164,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["getmetriclist",{"_index":167,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["global.setinterv",{"_index":136,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["grant",{"_index":536,"title":{},"body":{"license.html":{}}}],["group",{"_index":168,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"index.html":{}}}],["handl",{"_index":396,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["heap",{"_index":82,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["heapsizelimit",{"_index":97,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["heapspacestatist",{"_index":138,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["heapspacestatistics.foreach((heapspacestatist",{"_index":150,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["heapstatist",{"_index":140,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["herebi",{"_index":535,"title":{},"body":{"license.html":{}}}],["histori",{"_index":152,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.availablesize.removetag(nam",{"_index":213,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.availablesize.setgroup(group",{"_index":181,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.availablesize.settag(nam",{"_index":197,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.availablesize.setvalue(heapspacestatistic.space_available_s",{"_index":154,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.physicalsize.removetag(nam",{"_index":214,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.physicalsize.setgroup(group",{"_index":182,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.physicalsize.settag(nam",{"_index":198,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.physicalsize.setvalue(heapspacestatistic.physical_space_s",{"_index":155,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.size.removetag(nam",{"_index":215,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.size.setgroup(group",{"_index":183,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.size.settag(nam",{"_index":199,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.size.setvalue(heapspacestatistic.space_s",{"_index":156,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.usedsize.removetag(nam",{"_index":216,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.usedsize.setgroup(group",{"_index":184,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.usedsize.settag(nam",{"_index":200,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.usedsize.setvalue(heapspacestatistic.space_used_s",{"_index":157,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["hold",{"_index":231,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["holder",{"_index":578,"title":{},"body":{"license.html":{}}}],["identifi",{"_index":481,"title":{},"body":{"coverage.html":{}}}],["implement",{"_index":74,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["impli",{"_index":571,"title":{},"body":{"license.html":{}}}],["import",{"_index":40,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"index.html":{}}}],["includ",{"_index":547,"title":{},"body":{"license.html":{}}}],["increment",{"_index":289,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["incrementalmark",{"_index":317,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["incrementalmarkingrun",{"_index":276,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["inspector",{"_index":45,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"dependencies.html":{},"index.html":{}}}],["instal",{"_index":503,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":26,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"index.html":{}}}],["intervalref",{"_index":108,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["keep",{"_index":526,"title":{},"body":{"index.html":{}}}],["kind",{"_index":569,"title":{},"body":{"license.html":{}}}],["lag",{"_index":232,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["last",{"_index":409,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lastusag",{"_index":387,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["liabil",{"_index":582,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":579,"title":{},"body":{"license.html":{}}}],["lib/.../v8gcmetrics.t",{"_index":614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/metrics/v8eventloop.t",{"_index":220,"title":{},"body":{"classes/V8EventLoop.html":{},"coverage.html":{}}}],["lib/metrics/v8eventloop.ts:107",{"_index":243,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["lib/metrics/v8eventloop.ts:120",{"_index":244,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["lib/metrics/v8eventloop.ts:132",{"_index":238,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["lib/metrics/v8eventloop.ts:145",{"_index":240,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["lib/metrics/v8eventloop.ts:28",{"_index":235,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["lib/metrics/v8eventloop.ts:36",{"_index":230,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["lib/metrics/v8eventloop.ts:44",{"_index":229,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["lib/metrics/v8eventloop.ts:73",{"_index":245,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["lib/metrics/v8eventloop.ts:85",{"_index":237,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["lib/metrics/v8eventloop.ts:97",{"_index":236,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["lib/metrics/v8gcmetrics.t",{"_index":273,"title":{},"body":{"classes/V8GCMetrics.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["lib/metrics/v8gcmetrics.ts:145",{"_index":304,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["lib/metrics/v8gcmetrics.ts:155",{"_index":300,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["lib/metrics/v8gcmetrics.ts:167",{"_index":299,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["lib/metrics/v8gcmetrics.ts:177",{"_index":302,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["lib/metrics/v8gcmetrics.ts:194",{"_index":303,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["lib/metrics/v8gcmetrics.ts:210",{"_index":301,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["lib/metrics/v8gcmetrics.ts:33",{"_index":293,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["lib/metrics/v8gcmetrics.ts:41",{"_index":294,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["lib/metrics/v8gcmetrics.ts:49",{"_index":291,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["lib/metrics/v8gcmetrics.ts:57",{"_index":288,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["lib/metrics/v8gcmetrics.ts:65",{"_index":296,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["lib/metrics/v8gcmetrics.ts:73",{"_index":282,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["lib/metrics/v8gcmetrics.ts:81",{"_index":281,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["lib/metrics/v8memorymetrics.t",{"_index":5,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{},"coverage.html":{}}}],["lib/metrics/v8memorymetrics.ts:107",{"_index":370,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:115",{"_index":369,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:123",{"_index":372,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:131",{"_index":371,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:139",{"_index":373,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:147",{"_index":364,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:155",{"_index":365,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:163",{"_index":367,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:171",{"_index":363,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:229",{"_index":379,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:239",{"_index":375,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:25",{"_index":36,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["lib/metrics/v8memorymetrics.ts:251",{"_index":374,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:261",{"_index":377,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:288",{"_index":378,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:314",{"_index":376,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:32",{"_index":38,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["lib/metrics/v8memorymetrics.ts:39",{"_index":33,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["lib/metrics/v8memorymetrics.ts:46",{"_index":24,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["lib/metrics/v8memorymetrics.ts:91",{"_index":366,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:99",{"_index":368,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8processmetrics.t",{"_index":381,"title":{},"body":{"classes/V8ProcessMetrics.html":{},"coverage.html":{}}}],["lib/metrics/v8processmetrics.ts:124",{"_index":418,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:136",{"_index":414,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:148",{"_index":413,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:158",{"_index":416,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:175",{"_index":417,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:191",{"_index":415,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:201",{"_index":419,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:207",{"_index":420,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:214",{"_index":421,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:221",{"_index":422,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:29",{"_index":411,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:37",{"_index":393,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:45",{"_index":398,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:53",{"_index":401,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:61",{"_index":405,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:69",{"_index":406,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:77",{"_index":412,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:85",{"_index":392,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["librari",{"_index":504,"title":{},"body":{"index.html":{}}}],["licens",{"_index":530,"title":{"license.html":{}},"body":{"license.html":{}}}],["limit",{"_index":548,"title":{},"body":{"license.html":{}}}],["line",{"_index":597,"title":{},"body":{"unit-test.html":{}}}],["link",{"_index":47,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["ll",{"_index":76,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["loop",{"_index":222,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["major",{"_index":292,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["majorrun",{"_index":277,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["mallocedmemori",{"_index":100,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["map",{"_index":41,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"dependencies.html":{}}}],["map.set(metric.getnam",{"_index":166,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["mark",{"_index":290,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["match",{"_index":218,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":96,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["meant",{"_index":505,"title":{},"body":{"index.html":{}}}],["measur",{"_index":249,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["memberof",{"_index":49,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["memori",{"_index":70,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{},"index.html":{}}}],["memorymetr",{"_index":513,"title":{},"body":{"index.html":{}}}],["memorymetrics.stop();licens",{"_index":528,"title":{},"body":{"index.html":{}}}],["merchant",{"_index":572,"title":{},"body":{"license.html":{}}}],["merg",{"_index":551,"title":{},"body":{"license.html":{}}}],["method",{"_index":224,"title":{},"body":{"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["metric",{"_index":11,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"dependencies.html":{},"index.html":{}}}],["metricregistri",{"_index":510,"title":{},"body":{"index.html":{}}}],["metrics.push(this.availables",{"_index":66,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["metrics.push(this.physicals",{"_index":67,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["metrics.push(this.s",{"_index":64,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["metrics.push(this.useds",{"_index":65,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["metricset",{"_index":44,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["microsecond",{"_index":233,"title":{},"body":{"classes/V8EventLoop.html":{},"classes/V8ProcessMetrics.html":{}}}],["minor",{"_index":295,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["minorrun",{"_index":278,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["miscellan",{"_index":613,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["mit",{"_index":529,"title":{},"body":{"index.html":{},"license.html":{}}}],["mnt/c/git/inspector",{"_index":598,"title":{},"body":{"unit-test.html":{}}}],["modifi",{"_index":550,"title":{},"body":{"license.html":{}}}],["modul",{"_index":591,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["monotonecount",{"_index":400,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["monotonecounter(\"cpu_usag",{"_index":424,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["name",{"_index":29,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"index.html":{}}}],["nanosec",{"_index":267,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["nanosecond",{"_index":306,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["new",{"_index":52,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["nodej",{"_index":71,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"index.html":{}}}],["nodejs.cpuusag",{"_index":408,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["nodejs.tim",{"_index":107,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["noninfring",{"_index":576,"title":{},"body":{"license.html":{}}}],["note",{"_index":522,"title":{},"body":{"index.html":{}}}],["notic",{"_index":563,"title":{},"body":{"license.html":{}}}],["npm",{"_index":507,"title":{},"body":{"index.html":{}}}],["number",{"_index":109,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["object",{"_index":410,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["obtain",{"_index":540,"title":{},"body":{"license.html":{}}}],["option",{"_index":31,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["otherwis",{"_index":587,"title":{},"body":{"license.html":{}}}],["out",{"_index":589,"title":{},"body":{"license.html":{}}}],["overview",{"_index":592,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":461,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["p._getactivehandl",{"_index":463,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["p._getactiverequest",{"_index":465,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["packag",{"_index":495,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":50,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["paramet",{"_index":27,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["particular",{"_index":574,"title":{},"body":{"license.html":{}}}],["peakmallocedmemori",{"_index":102,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["permiss",{"_index":534,"title":{},"body":{"license.html":{}}}],["permit",{"_index":557,"title":{},"body":{"license.html":{}}}],["person",{"_index":539,"title":{},"body":{"license.html":{}}}],["phantomcallbackprocess",{"_index":320,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["phantomcallbackprocessingrun",{"_index":279,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["physic",{"_index":35,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["physicals",{"_index":17,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["portion",{"_index":566,"title":{},"body":{"license.html":{}}}],["privat",{"_index":77,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["process",{"_index":298,"title":{},"body":{"classes/V8GCMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["process.cpuusag",{"_index":468,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["process.hrtim",{"_index":259,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["process.hrtime(start",{"_index":266,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["properti",{"_index":14,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["provid",{"_index":567,"title":{},"body":{"license.html":{}}}],["public",{"_index":15,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["publish",{"_index":552,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":575,"title":{},"body":{"license.html":{}}}],["record",{"_index":159,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["refer",{"_index":105,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["regist",{"_index":518,"title":{},"body":{"index.html":{}}}],["registri",{"_index":511,"title":{},"body":{"index.html":{}}}],["registry.getdefaultclock",{"_index":515,"title":{},"body":{"index.html":{}}}],["registry.register(memorymetrics.getnam",{"_index":520,"title":{},"body":{"index.html":{}}}],["relat",{"_index":69,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["remov",{"_index":201,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["removetag",{"_index":225,"title":{},"body":{"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["removetag(nam",{"_index":203,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["report",{"_index":241,"title":{},"body":{"classes/V8EventLoop.html":{},"index.html":{}}}],["reporteventlooplag",{"_index":226,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["reporteventlooplag(start",{"_index":239,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["request",{"_index":399,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["require(\"gc",{"_index":307,"title":{},"body":{"classes/V8GCMetrics.html":{},"miscellaneous/variables.html":{}}}],["restrict",{"_index":546,"title":{},"body":{"license.html":{}}}],["result",{"_index":217,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":163,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["right",{"_index":549,"title":{},"body":{"license.html":{}}}],["run",{"_index":283,"title":{},"body":{"classes/V8GCMetrics.html":{},"index.html":{}}}],["sampler",{"_index":112,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["samplerate=1000",{"_index":110,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["save",{"_index":508,"title":{},"body":{"index.html":{}}}],["schedul",{"_index":106,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["scheduler=setinterv",{"_index":246,"title":{},"body":{"classes/V8EventLoop.html":{},"classes/V8ProcessMetrics.html":{}}}],["sell",{"_index":556,"title":{},"body":{"license.html":{}}}],["set",{"_index":68,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["setgroup",{"_index":227,"title":{},"body":{"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["setgroup(group",{"_index":170,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["setimmediate((start",{"_index":257,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["setinterv",{"_index":247,"title":{},"body":{"classes/V8EventLoop.html":{},"classes/V8ProcessMetrics.html":{}}}],["settag",{"_index":228,"title":{},"body":{"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["settag(nam",{"_index":187,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["setup",{"_index":521,"title":{},"body":{"index.html":{}}}],["shall",{"_index":564,"title":{},"body":{"license.html":{}}}],["simplegaug",{"_index":8,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["simplegauge(\"active_handl",{"_index":434,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["simplegauge(\"active_request",{"_index":436,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["simplegauge(\"heapsizelimit",{"_index":98,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["simplegauge(\"mallocedmemori",{"_index":101,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["simplegauge(\"peakmallocedmemori",{"_index":103,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["simplegauge(\"spaceavailables",{"_index":57,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["simplegauge(\"spacephysicals",{"_index":59,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["simplegauge(\"spaces",{"_index":53,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["simplegauge(\"spaceuseds",{"_index":55,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["simplegauge(\"totalavailables",{"_index":87,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["simplegauge(\"totalheaps",{"_index":84,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["simplegauge(\"totalheapsizeexecut",{"_index":93,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["simplegauge(\"totalphysicals",{"_index":89,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["simplegauge(\"usedheaps",{"_index":95,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["size",{"_index":18,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["slf",{"_index":328,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["slf.allruns.addduration(dur",{"_index":346,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["slf.incrementalmarkingruns.addduration(dur",{"_index":342,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["slf.majorruns.addduration(dur",{"_index":340,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["slf.minorruns.addduration(dur",{"_index":337,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["slf.phantomcallbackprocessingruns.addduration(dur",{"_index":344,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["softwar",{"_index":542,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"dependencies.html":{}}}],["space",{"_index":10,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{},"index.html":{}}}],["spacehistori",{"_index":1,"title":{"classes/SpaceHistory.html":{}},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{},"coverage.html":{}}}],["spacehistory(\"code_spac",{"_index":130,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["spacehistory(\"large_object_spac",{"_index":134,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["spacehistory(\"map_spac",{"_index":132,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["spacehistory(\"new_spac",{"_index":125,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["spacehistory(\"old_spac",{"_index":128,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["spacenam",{"_index":32,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["spece",{"_index":81,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["specifi",{"_index":202,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["spent",{"_index":426,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["start",{"_index":242,"title":{"index.html":{},"license.html":{}},"body":{"classes/V8EventLoop.html":{}}}],["stat",{"_index":308,"title":{},"body":{"classes/V8GCMetrics.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["statement",{"_index":482,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["statist",{"_index":512,"title":{},"body":{"index.html":{}}}],["stats.gctyp",{"_index":334,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["stats.paus",{"_index":332,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["stop",{"_index":158,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["store",{"_index":78,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["string",{"_index":22,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["subject",{"_index":559,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":554,"title":{},"body":{"license.html":{}}}],["substanti",{"_index":565,"title":{},"body":{"license.html":{}}}],["super",{"_index":114,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["support",{"_index":499,"title":{},"body":{"dependencies.html":{}}}],["support/regist",{"_index":42,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["switch",{"_index":333,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["system",{"_index":403,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["systemusagemicro",{"_index":472,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["tabl",{"_index":494,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":493,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tag",{"_index":185,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["test",{"_index":595,"title":{"unit-test.html":{}},"body":{"unit-test.html":{}}}],["this.activehandl",{"_index":433,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.activehandles.removetag(nam",{"_index":453,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.activehandles.setgroup(group",{"_index":443,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.activehandles.settag(nam",{"_index":448,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.activehandles.setvalue(p._getactivehandles().length",{"_index":464,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.activerequest",{"_index":435,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.activerequests.removetag(nam",{"_index":454,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.activerequests.setgroup(group",{"_index":444,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.activerequests.settag(nam",{"_index":449,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.activerequests.setvalue(p._getactiverequests().length",{"_index":466,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.allrun",{"_index":321,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.allruns.removetag(nam",{"_index":358,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.allruns.setgroup(group",{"_index":348,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.allruns.settag(\"typ",{"_index":322,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.allruns.settag(nam",{"_index":353,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.availables",{"_index":56,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.availablesize.settag(\"spac",{"_index":62,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.cpusystemusag",{"_index":423,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cpusystemusage.increment(systemusagemicro",{"_index":476,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cpusystemusage.removetag(nam",{"_index":455,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cpusystemusage.setgroup(group",{"_index":445,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cpusystemusage.settag(\"typ",{"_index":427,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cpusystemusage.settag(nam",{"_index":450,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cputotalusag",{"_index":428,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cputotalusage.increment(userusagemicro",{"_index":477,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cputotalusage.removetag(nam",{"_index":456,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cputotalusage.setgroup(group",{"_index":446,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cputotalusage.settag(\"typ",{"_index":429,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cputotalusage.settag(nam",{"_index":451,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cpuuserusag",{"_index":430,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cpuuserusage.increment(userusagemicro",{"_index":478,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cpuuserusage.removetag(nam",{"_index":457,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cpuuserusage.setgroup(group",{"_index":447,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cpuuserusage.settag(\"typ",{"_index":431,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cpuuserusage.settag(nam",{"_index":452,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.eventlooplag",{"_index":248,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["this.eventlooplag.removetag(nam",{"_index":264,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["this.eventlooplag.setgroup(group",{"_index":262,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["this.eventlooplag.settag(nam",{"_index":263,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["this.eventlooplag.setvalue(nanosec",{"_index":271,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["this.gc",{"_index":329,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.gc.on(\"stat",{"_index":330,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.gc.removealllisten",{"_index":347,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.group",{"_index":171,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["this.heapsizelimit.removetag(nam",{"_index":210,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.heapsizelimit.setgroup(group",{"_index":177,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.heapsizelimit.settag(nam",{"_index":194,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.heapsizelimit.setvalue(heapstatistics.heap_size_limit",{"_index":147,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.incrementalmarkingrun",{"_index":315,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.incrementalmarkingruns.removetag(nam",{"_index":359,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.incrementalmarkingruns.setgroup(group",{"_index":349,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.incrementalmarkingruns.settag(\"typ",{"_index":316,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.incrementalmarkingruns.settag(nam",{"_index":354,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.intervalref",{"_index":135,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.intervalref.unref",{"_index":161,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.lastusag",{"_index":475,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.lastusage.system",{"_index":474,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.lastusage.us",{"_index":471,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.majorrun",{"_index":313,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.majorruns.removetag(nam",{"_index":360,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.majorruns.setgroup(group",{"_index":350,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.majorruns.settag(\"typ",{"_index":314,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.majorruns.settag(nam",{"_index":355,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.mallocedmemory.removetag(nam",{"_index":211,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.mallocedmemory.setgroup(group",{"_index":178,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.mallocedmemory.settag(nam",{"_index":195,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.mallocedmemory.setvalue(heapstatistics.heap_size_limit",{"_index":148,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.metr",{"_index":126,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["this.metrics.foreach((metr",{"_index":165,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["this.metrics.push(this.activehandl",{"_index":437,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.metrics.push(this.activerequest",{"_index":438,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.metrics.push(this.allrun",{"_index":323,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.metrics.push(this.cpusystemusag",{"_index":439,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.metrics.push(this.cputotalusag",{"_index":440,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.metrics.push(this.cpuuserusag",{"_index":441,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.metrics.push(this.eventlooplag",{"_index":255,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["this.metrics.push(this.heapsizelimit",{"_index":121,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.metrics.push(this.incrementalmarkingrun",{"_index":324,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.metrics.push(this.majorrun",{"_index":325,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.metrics.push(this.mallocedmemori",{"_index":122,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.metrics.push(this.minorrun",{"_index":326,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.metrics.push(this.peakmallocedmemori",{"_index":123,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.metrics.push(this.phantomcallbackprocessingrun",{"_index":327,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.metrics.push(this.totalavailables",{"_index":118,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.metrics.push(this.totalheaps",{"_index":116,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.metrics.push(this.totalheapsizeexecut",{"_index":119,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.metrics.push(this.totalphysicals",{"_index":117,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.metrics.push(this.usedheaps",{"_index":120,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.minorrun",{"_index":309,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.minorruns.removetag(nam",{"_index":361,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.minorruns.setgroup(group",{"_index":351,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.minorruns.settag(\"typ",{"_index":312,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.minorruns.settag(nam",{"_index":356,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.nam",{"_index":115,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["this.peakmallocedmemory.removetag(nam",{"_index":212,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.peakmallocedmemory.setgroup(group",{"_index":179,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.peakmallocedmemory.settag(nam",{"_index":196,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.peakmallocedmemory.setvalue(heapstatistics.heap_size_limit",{"_index":149,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.phantomcallbackprocessingrun",{"_index":318,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.phantomcallbackprocessingruns.removetag(nam",{"_index":362,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.phantomcallbackprocessingruns.setgroup(group",{"_index":352,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.phantomcallbackprocessingruns.settag(\"typ",{"_index":319,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.phantomcallbackprocessingruns.settag(nam",{"_index":357,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.physicals",{"_index":58,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.physicalsize.settag(\"spac",{"_index":63,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.reporteventlooplag(start",{"_index":258,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["this.siz",{"_index":51,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.size.settag(\"spac",{"_index":60,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.spaces.foreach((histori",{"_index":180,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.spaces.get(heapspacestatistic.space_nam",{"_index":153,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.spaces.has(heapspacestatistic.space_nam",{"_index":151,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.spaces.set(\"code_spac",{"_index":129,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.spaces.set(\"large_object_spac",{"_index":133,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.spaces.set(\"map_spac",{"_index":131,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.spaces.set(\"new_spac",{"_index":124,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.spaces.set(\"old_spac",{"_index":127,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.tags.delete(nam",{"_index":204,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["this.tags.set(nam",{"_index":188,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["this.tim",{"_index":256,"title":{},"body":{"classes/V8EventLoop.html":{},"classes/V8ProcessMetrics.html":{}}}],["this.timer.unref",{"_index":261,"title":{},"body":{"classes/V8EventLoop.html":{},"classes/V8ProcessMetrics.html":{}}}],["this.totalavailablesize.removetag(nam",{"_index":206,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalavailablesize.setgroup(group",{"_index":173,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalavailablesize.settag(nam",{"_index":190,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalavailablesize.setvalue(heapstatistics.total_available_s",{"_index":144,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalheapsize.removetag(nam",{"_index":205,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalheapsize.setgroup(group",{"_index":172,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalheapsize.settag(nam",{"_index":189,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalheapsize.setvalue(heapstatistics.total_heap_s",{"_index":142,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalheapsizeexecutable.removetag(nam",{"_index":208,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalheapsizeexecutable.setgroup(group",{"_index":175,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalheapsizeexecutable.settag(nam",{"_index":192,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalheapsizeexecutable.setvalue(heapstatistics.total_heap_size_execut",{"_index":145,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalphysicalsize.removetag(nam",{"_index":207,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalphysicalsize.setgroup(group",{"_index":174,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalphysicalsize.settag(nam",{"_index":191,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalphysicalsize.setvalue(heapstatistics.total_physical_s",{"_index":143,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.upd",{"_index":442,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.updateactivehandl",{"_index":458,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.updateactiverequest",{"_index":459,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.updatecpuusag",{"_index":460,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.usedheapsize.removetag(nam",{"_index":209,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.usedheapsize.setgroup(group",{"_index":176,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.usedheapsize.settag(nam",{"_index":193,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.usedheapsize.setvalue(heapstatistics.used_heap_s",{"_index":146,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.useds",{"_index":54,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.usedsize.settag(\"spac",{"_index":61,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["time",{"_index":425,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["timer",{"_index":104,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["timer(clock",{"_index":310,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["tort",{"_index":586,"title":{},"body":{"license.html":{}}}],["total",{"_index":37,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["totalavailables",{"_index":86,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["totalheaps",{"_index":83,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["totalheapsizeexecut",{"_index":92,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["totalphysicals",{"_index":88,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["track",{"_index":394,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["type",{"_index":30,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"coverage.html":{}}}],["typeof",{"_index":462,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["typescript",{"_index":506,"title":{},"body":{"index.html":{}}}],["uesr",{"_index":432,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["und",{"_index":519,"title":{},"body":{"index.html":{}}}],["unit",{"_index":594,"title":{"unit-test.html":{}},"body":{"unit-test.html":{}}}],["unstop",{"_index":523,"title":{},"body":{"index.html":{}}}],["updat",{"_index":388,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["updateactivehandl",{"_index":389,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["updateactiverequest",{"_index":390,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["updatecpuusag",{"_index":391,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["us",{"_index":39,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{},"index.html":{},"license.html":{}}}],["usag",{"_index":404,"title":{},"body":{"classes/V8ProcessMetrics.html":{},"index.html":{}}}],["usedheaps",{"_index":94,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["useds",{"_index":19,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["user",{"_index":407,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["userusagemicro",{"_index":469,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["v8",{"_index":46,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{},"index.html":{}}}],["v8.getheapspacestatist",{"_index":139,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["v8.getheapstatist",{"_index":141,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["v8eventloop",{"_index":219,"title":{"classes/V8EventLoop.html":{}},"body":{"classes/V8EventLoop.html":{},"coverage.html":{}}}],["v8gcmetric",{"_index":272,"title":{"classes/V8GCMetrics.html":{}},"body":{"classes/V8GCMetrics.html":{},"coverage.html":{},"index.html":{}}}],["v8gcmetrics(\"gc",{"_index":517,"title":{},"body":{"index.html":{}}}],["v8memorymetr",{"_index":72,"title":{"classes/V8MemoryMetrics.html":{}},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{},"coverage.html":{},"index.html":{}}}],["v8memorymetrics(\"v8",{"_index":514,"title":{},"body":{"index.html":{}}}],["v8processmetr",{"_index":380,"title":{"classes/V8ProcessMetrics.html":{}},"body":{"classes/V8ProcessMetrics.html":{},"coverage.html":{}}}],["valu",{"_index":9,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"miscellaneous/variables.html":{}}}],["variabl",{"_index":486,"title":{"miscellaneous/variables.html":{}},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["vm",{"_index":501,"title":{},"body":{"index.html":{}}}],["vm/lib/metrics/v8gcmetrics.t",{"_index":599,"title":{},"body":{"unit-test.html":{}}}],["vm/lib/metrics/v8memorymetrics.t",{"_index":605,"title":{},"body":{"unit-test.html":{}}}],["void",{"_index":160,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["warranti",{"_index":568,"title":{},"body":{"license.html":{}}}],["well",{"_index":169,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["whether",{"_index":583,"title":{},"body":{"license.html":{}}}],["without",{"_index":545,"title":{},"body":{"license.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/SpaceHistory.html":{"url":"classes/SpaceHistory.html","title":"class - SpaceHistory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SpaceHistory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/V8MemoryMetrics.ts\n        \n\n            \n                Description\n            \n            \n                A collection of SimpleGauge values for space metrics.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                availableSize\n                            \n                            \n                                    Public\n                                physicalSize\n                            \n                            \n                                    Public\n                                size\n                            \n                            \n                                    Public\n                                usedSize\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(spaceName: string, metrics: Metric[])\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/V8MemoryMetrics.ts:46\n                            \n                        \n\n                \n                    \n                            Creates an instance of SpaceHistory.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        spaceName\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metrics\n                                                  \n                                                        \n                                                                    Metric[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            availableSize\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        availableSize:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:39\n                            \n                        \n\n                \n                    \n                        Available size.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            physicalSize\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        physicalSize:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:46\n                            \n                        \n\n                \n                    \n                        Physical size.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        size:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:25\n                            \n                        \n\n                \n                    \n                        Total size.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            usedSize\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        usedSize:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:32\n                            \n                        \n\n                \n                    \n                        Used size.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport {\n    BaseMetric,\n    Metric,\n    MetricSet,\n    SimpleGauge,\n} from \"inspector-metrics\";\nimport * as v8 from \"v8\";\n\n/**\n * A collection of {@link SimpleGauge} values for space metrics.\n *\n * @export\n * @class SpaceHistory\n */\nexport class SpaceHistory {\n\n    /**\n     * Total size.\n     *\n     * @type {SimpleGauge}\n     * @memberof SpaceHistory\n     */\n    public size: SimpleGauge;\n    /**\n     * Used size.\n     *\n     * @type {SimpleGauge}\n     * @memberof SpaceHistory\n     */\n    public usedSize: SimpleGauge;\n    /**\n     * Available size.\n     *\n     * @type {SimpleGauge}\n     * @memberof SpaceHistory\n     */\n    public availableSize: SimpleGauge;\n    /**\n     * Physical size.\n     *\n     * @type {SimpleGauge}\n     * @memberof SpaceHistory\n     */\n    public physicalSize: SimpleGauge;\n\n    /**\n     * Creates an instance of SpaceHistory.\n     *\n     * @param {string} spaceName\n     * @param {Metric[]} metrics\n     * @memberof SpaceHistory\n     */\n    public constructor(spaceName: string, metrics: Metric[]) {\n        this.size = new SimpleGauge(\"spaceSize\");\n        this.usedSize = new SimpleGauge(\"spaceUsedSize\");\n        this.availableSize = new SimpleGauge(\"spaceAvailableSize\");\n        this.physicalSize = new SimpleGauge(\"spacePhysicalSize\");\n\n        this.size.setTag(\"space\", spaceName);\n        this.usedSize.setTag(\"space\", spaceName);\n        this.availableSize.setTag(\"space\", spaceName);\n        this.physicalSize.setTag(\"space\", spaceName);\n\n        metrics.push(this.size);\n        metrics.push(this.usedSize);\n        metrics.push(this.availableSize);\n        metrics.push(this.physicalSize);\n    }\n\n}\n\n/**\n * Metric set with values related to the memory nodejs uses.\n *\n * @export\n * @class V8MemoryMetrics\n * @extends {BaseMetric}\n * @implements {MetricSet}\n */\nexport class V8MemoryMetrics extends BaseMetric implements MetricSet {\n\n    /**\n     * Contains ll the metrics in this metric-set.\n     *\n     * @private\n     * @type {Metric[]}\n     * @memberof V8MemoryMetrics\n     */\n    private metrics: Metric[] = [];\n    /**\n     * Stores the size gauges for different speces.\n     *\n     * @private\n     * @type {Map}\n     * @memberof V8MemoryMetrics\n     */\n    private spaces: Map = new Map();\n    /**\n     * Total heap size.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private totalHeapSize: SimpleGauge = new SimpleGauge(\"totalHeapSize\");\n    /**\n     * Total availabel size.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private totalAvailableSize: SimpleGauge = new SimpleGauge(\"totalAvailableSize\");\n    /**\n     * Total physical size.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private totalPhysicalSize: SimpleGauge = new SimpleGauge(\"totalPhysicalSize\");\n    /**\n     * Total heap size for executable code.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private totalHeapSizeExecutable: SimpleGauge = new SimpleGauge(\"totalHeapSizeExecutable\");\n    /**\n     * Used heap size.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private usedHeapSize: SimpleGauge = new SimpleGauge(\"usedHeapSize\");\n    /**\n     * Maximum heap size.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private heapSizeLimit: SimpleGauge = new SimpleGauge(\"heapSizeLimit\");\n    /**\n     * Allocated memory.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private mallocedMemory: SimpleGauge = new SimpleGauge(\"mallocedMemory\");\n    /**\n     * Maximum allocated memory.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private peakMallocedMemory: SimpleGauge = new SimpleGauge(\"peakMallocedMemory\");\n    /**\n     * The timer reference from the scheduler.\n     *\n     * @private\n     * @type {NodeJS.Timer}\n     * @memberof V8MemoryMetrics\n     */\n    private intervalRef: NodeJS.Timer;\n\n    /**\n     * Creates an instance of V8MemoryMetrics.\n     *\n     * @param {string} name\n     * @param {number} [sampleRate=1000]\n     * @memberof V8MemoryMetrics\n     */\n    public constructor(name: string, sampleRate = 1000) {\n        super();\n        this.name = name;\n\n        this.metrics.push(this.totalHeapSize);\n        this.metrics.push(this.totalPhysicalSize);\n        this.metrics.push(this.totalAvailableSize);\n        this.metrics.push(this.totalHeapSizeExecutable);\n        this.metrics.push(this.usedHeapSize);\n        this.metrics.push(this.heapSizeLimit);\n        this.metrics.push(this.mallocedMemory);\n        this.metrics.push(this.peakMallocedMemory);\n\n        this.spaces.set(\"new_space\", new SpaceHistory(\"new_space\", this.metrics));\n        this.spaces.set(\"old_space\", new SpaceHistory(\"old_space\", this.metrics));\n        this.spaces.set(\"code_space\", new SpaceHistory(\"code_space\", this.metrics));\n        this.spaces.set(\"map_space\", new SpaceHistory(\"map_space\", this.metrics));\n        this.spaces.set(\"large_object_space\", new SpaceHistory(\"large_object_space\", this.metrics));\n\n        this.intervalRef = global.setInterval(() => {\n            const heapSpaceStatistics = v8.getHeapSpaceStatistics();\n            const heapStatistics = v8.getHeapStatistics();\n\n            this.totalHeapSize.setValue(heapStatistics.total_heap_size);\n            this.totalPhysicalSize.setValue(heapStatistics.total_physical_size);\n            this.totalAvailableSize.setValue(heapStatistics.total_available_size);\n            this.totalHeapSizeExecutable.setValue(heapStatistics.total_heap_size_executable);\n            this.usedHeapSize.setValue(heapStatistics.used_heap_size);\n            this.heapSizeLimit.setValue(heapStatistics.heap_size_limit);\n            this.mallocedMemory.setValue(heapStatistics.heap_size_limit);\n            this.peakMallocedMemory.setValue(heapStatistics.heap_size_limit);\n\n            heapSpaceStatistics.forEach((heapSpaceStatistic) => {\n                if (this.spaces.has(heapSpaceStatistic.space_name)) {\n                    const history = this.spaces.get(heapSpaceStatistic.space_name);\n                    history.availableSize.setValue(heapSpaceStatistic.space_available_size);\n                    history.physicalSize.setValue(heapSpaceStatistic.physical_space_size);\n                    history.size.setValue(heapSpaceStatistic.space_size);\n                    history.usedSize.setValue(heapSpaceStatistic.space_used_size);\n                }\n            });\n        }, sampleRate);\n    }\n\n    /**\n     * Stops the recording of memory metrics.\n     *\n     * @memberof V8MemoryMetrics\n     */\n    public stop(): void {\n        this.intervalRef.unref();\n    }\n\n    /**\n     * Gets all metrics.\n     *\n     * @returns {Map}\n     * @memberof V8MemoryMetrics\n     */\n    public getMetrics(): Map {\n        const map: Map = new Map();\n        this.metrics.forEach((metric) => map.set(metric.getName(), metric));\n        return map;\n    }\n\n    /**\n     * Gets all metrics.\n     *\n     * @returns {Metric[]}\n     * @memberof V8MemoryMetrics\n     */\n    public getMetricList(): Metric[] {\n        return this.metrics;\n    }\n\n    /**\n     * Sets the group of this metric-set as well as all contained metrics.\n     *\n     * @param {string} group\n     * @memberof V8MemoryMetrics\n     */\n    public setGroup(group: string): void {\n        this.group = group;\n\n        this.totalHeapSize.setGroup(group);\n        this.totalAvailableSize.setGroup(group);\n        this.totalPhysicalSize.setGroup(group);\n        this.totalHeapSizeExecutable.setGroup(group);\n        this.usedHeapSize.setGroup(group);\n        this.heapSizeLimit.setGroup(group);\n        this.mallocedMemory.setGroup(group);\n        this.peakMallocedMemory.setGroup(group);\n\n        this.spaces.forEach((history) => {\n            history.availableSize.setGroup(group);\n            history.physicalSize.setGroup(group);\n            history.size.setGroup(group);\n            history.usedSize.setGroup(group);\n        });\n    }\n\n    /**\n     * Sets the tags of this metric-set all contained metrics accordingly.\n     *\n     * @param {string} name\n     * @param {string} value\n     * @memberof V8MemoryMetrics\n     */\n    public setTag(name: string, value: string): void {\n        this.tags.set(name, value);\n\n        this.totalHeapSize.setTag(name, value);\n        this.totalAvailableSize.setTag(name, value);\n        this.totalPhysicalSize.setTag(name, value);\n        this.totalHeapSizeExecutable.setTag(name, value);\n        this.usedHeapSize.setTag(name, value);\n        this.heapSizeLimit.setTag(name, value);\n        this.mallocedMemory.setTag(name, value);\n        this.peakMallocedMemory.setTag(name, value);\n\n        this.spaces.forEach((history) => {\n            history.availableSize.setTag(name, value);\n            history.physicalSize.setTag(name, value);\n            history.size.setTag(name, value);\n            history.usedSize.setTag(name, value);\n        });\n    }\n\n    /**\n     * Removes the specified tag from this metric-set and all contained metrics accordingly.\n     *\n     * @param {string} name\n     * @memberof V8MemoryMetrics\n     */\n    public removeTag(name: string): void {\n        this.tags.delete(name);\n\n        this.totalHeapSize.removeTag(name);\n        this.totalAvailableSize.removeTag(name);\n        this.totalPhysicalSize.removeTag(name);\n        this.totalHeapSizeExecutable.removeTag(name);\n        this.usedHeapSize.removeTag(name);\n        this.heapSizeLimit.removeTag(name);\n        this.mallocedMemory.removeTag(name);\n        this.peakMallocedMemory.removeTag(name);\n\n        this.spaces.forEach((history) => {\n            history.availableSize.removeTag(name);\n            history.physicalSize.removeTag(name);\n            history.size.removeTag(name);\n            history.usedSize.removeTag(name);\n        });\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/V8EventLoop.html":{"url":"classes/V8EventLoop.html","title":"class - V8EventLoop","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  V8EventLoop\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/V8EventLoop.ts\n        \n\n            \n                Description\n            \n            \n                Metric set with values related to the nodejs event loop.\n\n            \n\n            \n                Extends\n            \n            \n                    BaseMetric\n            \n\n            \n                Implements\n            \n            \n                        MetricSet\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                eventLoopLag\n                            \n                            \n                                    Private\n                                metrics\n                            \n                            \n                                    Private\n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getMetricList\n                            \n                            \n                                    Public\n                                getMetrics\n                            \n                            \n                                    Public\n                                removeTag\n                            \n                            \n                                    Private\n                                reportEventloopLag\n                            \n                            \n                                    Public\n                                setGroup\n                            \n                            \n                                    Public\n                                setTag\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(name: string, scheduler: Scheduler)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/V8EventLoop.ts:44\n                            \n                        \n\n                \n                    \n                            Creates an instance of V8EventLoop.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        scheduler\n                                                  \n                                                        \n                                                                    Scheduler\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventLoopLag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        eventLoopLag:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8EventLoop.ts:36\n                            \n                        \n\n                \n                    \n                        Holds the event-loop lag in microseconds.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            metrics\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        metrics:     Metric[]\n\n                    \n                \n                    \n                        \n                            Type :     Metric[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8EventLoop.ts:28\n                            \n                        \n\n                \n                    \n                        Contains ll the metrics in this metric-set.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            timer\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        timer:     NodeJS.Timer\n\n                    \n                \n                    \n                        \n                            Type :     NodeJS.Timer\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8EventLoop.ts:44\n                            \n                        \n\n                \n                    \n                        The timer reference from the scheduler.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMetricList\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMetricList()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8EventLoop.ts:97\n                            \n                        \n\n\n                \n                    \n                            Gets all metrics.\n\n\n                            \n                            \n                            \n                                Returns :     Metric[]\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMetrics\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMetrics()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8EventLoop.ts:85\n                            \n                        \n\n\n                \n                    \n                            Gets all metrics.\n\n\n                            \n                            \n                            \n                                Returns :     Map\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            removeTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        removeTag(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8EventLoop.ts:132\n                            \n                        \n\n\n                \n                    \n                            Removes the specified tag from this metric-set and all contained metrics accordingly.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            reportEventloopLag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        reportEventloopLag(start: [number, number])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8EventLoop.ts:145\n                            \n                        \n\n\n                \n                    \n                            Reports the event-loop lag.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        start\n                                                        \n                                                                    [number, number]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setGroup(group: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8EventLoop.ts:107\n                            \n                        \n\n\n                \n                    \n                            Sets the group of this metric-set as well as all contained metrics.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setTag(name: string, value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8EventLoop.ts:120\n                            \n                        \n\n\n                \n                    \n                            Sets the tags of this metric-set all contained metrics accordingly.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            stop\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        stop()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8EventLoop.ts:73\n                            \n                        \n\n\n                \n                    \n                            Stops the recording of event-loop metrics.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport {\n    BaseMetric,\n    Metric,\n    MetricSet,\n    Scheduler,\n    SimpleGauge,\n} from \"inspector-metrics\";\n\n/**\n * Metric set with values related to the nodejs event loop.\n *\n * @export\n * @class V8EventLoop\n * @extends {BaseMetric}\n * @implements {MetricSet}\n */\nexport class V8EventLoop extends BaseMetric implements MetricSet {\n\n    /**\n     * Contains ll the metrics in this metric-set.\n     *\n     * @private\n     * @type {Metric[]}\n     * @memberof V8EventLoop\n     */\n    private metrics: Metric[] = [];\n    /**\n     * Holds the event-loop lag in microseconds.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8EventLoop\n     */\n    private eventLoopLag: SimpleGauge;\n    /**\n     * The timer reference from the scheduler.\n     *\n     * @private\n     * @type {NodeJS.Timer}\n     * @memberof V8EventLoop\n     */\n    private timer: NodeJS.Timer;\n\n    /**\n     * Creates an instance of V8EventLoop.\n     *\n     * @param {string} name\n     * @param {Scheduler} [scheduler=setInterval]\n     * @memberof V8EventLoop\n     */\n    public constructor(name: string, scheduler: Scheduler = setInterval) {\n        super();\n        this.name = name;\n\n        this.eventLoopLag = new SimpleGauge(\n            \"lag\",\n            \"measures the duration between committing a function to the event loop and the function being executed\",\n        );\n\n        this.metrics.push(this.eventLoopLag);\n        this.timer = scheduler(() => {\n            setImmediate((start) => this.reportEventloopLag(start), process.hrtime());\n        }, 500);\n    }\n\n    /**\n     * Stops the recording of event-loop metrics.\n     *\n     * @memberof V8EventLoop\n     */\n    public stop(): void {\n        if (this.timer) {\n            this.timer.unref();\n        }\n    }\n\n    /**\n     * Gets all metrics.\n     *\n     * @returns {Map}\n     * @memberof V8EventLoop\n     */\n    public getMetrics(): Map {\n        const map: Map = new Map();\n        this.metrics.forEach((metric) => map.set(metric.getName(), metric));\n        return map;\n    }\n\n    /**\n     * Gets all metrics.\n     *\n     * @returns {Metric[]}\n     * @memberof V8EventLoop\n     */\n    public getMetricList(): Metric[] {\n        return this.metrics;\n    }\n\n    /**\n     * Sets the group of this metric-set as well as all contained metrics.\n     *\n     * @param {string} group\n     * @memberof V8EventLoop\n     */\n    public setGroup(group: string): void {\n        this.group = group;\n\n        this.eventLoopLag.setGroup(group);\n    }\n\n    /**\n     * Sets the tags of this metric-set all contained metrics accordingly.\n     *\n     * @param {string} name\n     * @param {string} value\n     * @memberof V8EventLoop\n     */\n    public setTag(name: string, value: string): void {\n        this.tags.set(name, value);\n\n        this.eventLoopLag.setTag(name, value);\n    }\n\n    /**\n     * Removes the specified tag from this metric-set and all contained metrics accordingly.\n     *\n     * @param {string} name\n     * @memberof V8EventLoop\n     */\n    public removeTag(name: string): void {\n        this.tags.delete(name);\n\n        this.eventLoopLag.removeTag(name);\n    }\n\n    /**\n     * Reports the event-loop lag.\n     *\n     * @private\n     * @param {[number, number]} start\n     * @memberof V8EventLoop\n     */\n    private reportEventloopLag(start: [number, number]) {\n        const delta = process.hrtime(start);\n        const nanosec = delta[0] * 1e9 + delta[1];\n        this.eventLoopLag.setValue(nanosec);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/V8GCMetrics.html":{"url":"classes/V8GCMetrics.html","title":"class - V8GCMetrics","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  V8GCMetrics\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/V8GCMetrics.ts\n        \n\n            \n                Description\n            \n            \n                Metric set with values related to nodejs GC.\n\n            \n\n            \n                Extends\n            \n            \n                    BaseMetric\n            \n\n            \n                Implements\n            \n            \n                        MetricSet\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                allRuns\n                            \n                            \n                                    Private\n                                gc\n                            \n                            \n                                    Private\n                                incrementalMarkingRuns\n                            \n                            \n                                    Private\n                                majorRuns\n                            \n                            \n                                    Private\n                                metrics\n                            \n                            \n                                    Private\n                                minorRuns\n                            \n                            \n                                    Private\n                                phantomCallbackProcessingRuns\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getMetricList\n                            \n                            \n                                    Public\n                                getMetrics\n                            \n                            \n                                    Public\n                                removeTag\n                            \n                            \n                                    Public\n                                setGroup\n                            \n                            \n                                    Public\n                                setTag\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(name: string, clock: Clock)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/V8GCMetrics.ts:81\n                            \n                        \n\n                \n                    \n                            Creates an instance of V8GCMetrics.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        clock\n                                                  \n                                                        \n                                                                    Clock\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            allRuns\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        allRuns:     Timer\n\n                    \n                \n                    \n                        \n                            Type :     Timer\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8GCMetrics.ts:73\n                            \n                        \n\n                \n                    \n                        Timer for all gc runs.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            gc\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        gc:     EventEmitter\n\n                    \n                \n                    \n                        \n                            Type :     EventEmitter\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8GCMetrics.ts:81\n                            \n                        \n\n                \n                    \n                        Garbage collection data emitter.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            incrementalMarkingRuns\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        incrementalMarkingRuns:     Timer\n\n                    \n                \n                    \n                        \n                            Type :     Timer\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8GCMetrics.ts:57\n                            \n                        \n\n                \n                    \n                        Timer for the gc incremental marking runs.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            majorRuns\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        majorRuns:     Timer\n\n                    \n                \n                    \n                        \n                            Type :     Timer\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8GCMetrics.ts:49\n                            \n                        \n\n                \n                    \n                        Timer for the gc major runs.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            metrics\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        metrics:     Metric[]\n\n                    \n                \n                    \n                        \n                            Type :     Metric[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8GCMetrics.ts:33\n                            \n                        \n\n                \n                    \n                        Contains ll the metrics in this metric-set.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            minorRuns\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        minorRuns:     Timer\n\n                    \n                \n                    \n                        \n                            Type :     Timer\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8GCMetrics.ts:41\n                            \n                        \n\n                \n                    \n                        Timer for the gc minor runs.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            phantomCallbackProcessingRuns\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        phantomCallbackProcessingRuns:     Timer\n\n                    \n                \n                    \n                        \n                            Type :     Timer\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8GCMetrics.ts:65\n                            \n                        \n\n                \n                    \n                        Timer for the gc callback processing runs.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMetricList\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMetricList()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8GCMetrics.ts:167\n                            \n                        \n\n\n                \n                    \n                            Gets all metrics.\n\n\n                            \n                            \n                            \n                                Returns :     Metric[]\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMetrics\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMetrics()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8GCMetrics.ts:155\n                            \n                        \n\n\n                \n                    \n                            Gets all metrics.\n\n\n                            \n                            \n                            \n                                Returns :     Map\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            removeTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        removeTag(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8GCMetrics.ts:210\n                            \n                        \n\n\n                \n                    \n                            Removes the specified tag from this metric-set and all contained metrics accordingly.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setGroup(group: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8GCMetrics.ts:177\n                            \n                        \n\n\n                \n                    \n                            Sets the group of this metric-set as well as all contained metrics.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setTag(name: string, value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8GCMetrics.ts:194\n                            \n                        \n\n\n                \n                    \n                            Sets the tags of this metric-set all contained metrics accordingly.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            stop\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        stop()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8GCMetrics.ts:145\n                            \n                        \n\n\n                \n                    \n                            Stops the recording of gc metrics.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { EventEmitter } from \"events\";\nimport {\n    BaseMetric,\n    Clock,\n    DefaultReservoir,\n    Metric,\n    MetricSet,\n    NANOSECOND,\n    Timer,\n} from \"inspector-metrics\";\n\nconst GC = require(\"gc-stats\");\n\n/**\n * Metric set with values related to nodejs GC.\n *\n * @export\n * @class V8GCMetrics\n * @extends {BaseMetric}\n * @implements {MetricSet}\n */\nexport class V8GCMetrics extends BaseMetric implements MetricSet {\n\n    /**\n     * Contains ll the metrics in this metric-set.\n     *\n     * @private\n     * @type {Metric[]}\n     * @memberof V8GCMetrics\n     */\n    private metrics: Metric[] = [];\n    /**\n     * Timer for the gc minor runs.\n     *\n     * @private\n     * @type {Timer}\n     * @memberof V8GCMetrics\n     */\n    private minorRuns: Timer;\n    /**\n     * Timer for the gc major runs.\n     *\n     * @private\n     * @type {Timer}\n     * @memberof V8GCMetrics\n     */\n    private majorRuns: Timer;\n    /**\n     * Timer for the gc incremental marking runs.\n     *\n     * @private\n     * @type {Timer}\n     * @memberof V8GCMetrics\n     */\n    private incrementalMarkingRuns: Timer;\n    /**\n     * Timer for the gc callback processing runs.\n     *\n     * @private\n     * @type {Timer}\n     * @memberof V8GCMetrics\n     */\n    private phantomCallbackProcessingRuns: Timer;\n    /**\n     * Timer for all gc runs.\n     *\n     * @private\n     * @type {Timer}\n     * @memberof V8GCMetrics\n     */\n    private allRuns: Timer;\n    /**\n     * Garbage collection data emitter.\n     *\n     * @private\n     * @type {EventEmitter}\n     * @memberof V8GCMetrics\n     */\n    private gc: EventEmitter;\n\n    /**\n     * Creates an instance of V8GCMetrics.\n     *\n     * @param {string} name\n     * @param {Clock} clock\n     * @memberof V8GCMetrics\n     */\n    public constructor(name: string, clock: Clock) {\n        super();\n        this.name = name;\n\n        this.minorRuns = new Timer(clock, new DefaultReservoir(1024), \"runs\");\n        this.minorRuns.setTag(\"type\", \"minor\");\n\n        this.majorRuns = new Timer(clock, new DefaultReservoir(1024), \"runs\");\n        this.majorRuns.setTag(\"type\", \"major\");\n\n        this.incrementalMarkingRuns = new Timer(clock, new DefaultReservoir(1024), \"runs\");\n        this.incrementalMarkingRuns.setTag(\"type\", \"IncrementalMarking\");\n\n        this.phantomCallbackProcessingRuns = new Timer(clock, new DefaultReservoir(1024), \"runs\");\n        this.phantomCallbackProcessingRuns.setTag(\"type\", \"PhantomCallbackProcessing\");\n\n        this.allRuns = new Timer(clock, new DefaultReservoir(1024), \"runs\");\n        this.allRuns.setTag(\"type\", \"all\");\n\n        this.metrics.push(this.allRuns);\n        this.metrics.push(this.incrementalMarkingRuns);\n        this.metrics.push(this.majorRuns);\n        this.metrics.push(this.minorRuns);\n        this.metrics.push(this.phantomCallbackProcessingRuns);\n\n        const slf = this;\n        this.gc = GC();\n        this.gc.on(\"stats\", function(stats: any) {\n            const duration = stats.pause;\n\n            switch (stats.gctype) {\n                case 1:\n                    slf.minorRuns.addDuration(duration, NANOSECOND);\n                    break;\n                case 2:\n                    slf.majorRuns.addDuration(duration, NANOSECOND);\n                    break;\n                case 4:\n                    slf.incrementalMarkingRuns.addDuration(duration, NANOSECOND);\n                    break;\n                case 8:\n                    slf.phantomCallbackProcessingRuns.addDuration(duration, NANOSECOND);\n                    break;\n                case 15:\n                    slf.allRuns.addDuration(duration, NANOSECOND);\n                    break;\n            }\n        });\n    }\n\n    /**\n     * Stops the recording of gc metrics.\n     *\n     * @memberof V8GCMetrics\n     */\n    public stop(): void {\n        this.gc.removeAllListeners();\n    }\n\n    /**\n     * Gets all metrics.\n     *\n     * @returns {Map}\n     * @memberof V8GCMetrics\n     */\n    public getMetrics(): Map {\n        const map: Map = new Map();\n        this.metrics.forEach((metric) => map.set(metric.getName(), metric));\n        return map;\n    }\n\n    /**\n     * Gets all metrics.\n     *\n     * @returns {Metric[]}\n     * @memberof V8GCMetrics\n     */\n    public getMetricList(): Metric[] {\n        return this.metrics;\n    }\n\n    /**\n     * Sets the group of this metric-set as well as all contained metrics.\n     *\n     * @param {string} group\n     * @memberof V8GCMetrics\n     */\n    public setGroup(group: string): void {\n        this.group = group;\n\n        this.allRuns.setGroup(group);\n        this.incrementalMarkingRuns.setGroup(group);\n        this.majorRuns.setGroup(group);\n        this.minorRuns.setGroup(group);\n        this.phantomCallbackProcessingRuns.setGroup(group);\n    }\n\n    /**\n     * Sets the tags of this metric-set all contained metrics accordingly.\n     *\n     * @param {string} name\n     * @param {string} value\n     * @memberof V8GCMetrics\n     */\n    public setTag(name: string, value: string): void {\n        this.tags.set(name, value);\n\n        this.allRuns.setTag(name, value);\n        this.incrementalMarkingRuns.setTag(name, value);\n        this.majorRuns.setTag(name, value);\n        this.minorRuns.setTag(name, value);\n        this.phantomCallbackProcessingRuns.setTag(name, value);\n    }\n\n    /**\n     * Removes the specified tag from this metric-set and all contained metrics accordingly.\n     *\n     * @param {string} name\n     * @memberof V8GCMetrics\n     */\n    public removeTag(name: string): void {\n        this.tags.delete(name);\n\n        this.allRuns.removeTag(name);\n        this.incrementalMarkingRuns.removeTag(name);\n        this.majorRuns.removeTag(name);\n        this.minorRuns.removeTag(name);\n        this.phantomCallbackProcessingRuns.removeTag(name);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/V8MemoryMetrics.html":{"url":"classes/V8MemoryMetrics.html","title":"class - V8MemoryMetrics","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  V8MemoryMetrics\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/V8MemoryMetrics.ts\n        \n\n            \n                Description\n            \n            \n                Metric set with values related to the memory nodejs uses.\n\n            \n\n            \n                Extends\n            \n            \n                    BaseMetric\n            \n\n            \n                Implements\n            \n            \n                        MetricSet\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                heapSizeLimit\n                            \n                            \n                                    Private\n                                intervalRef\n                            \n                            \n                                    Private\n                                mallocedMemory\n                            \n                            \n                                    Private\n                                metrics\n                            \n                            \n                                    Private\n                                peakMallocedMemory\n                            \n                            \n                                    Private\n                                spaces\n                            \n                            \n                                    Private\n                                totalAvailableSize\n                            \n                            \n                                    Private\n                                totalHeapSize\n                            \n                            \n                                    Private\n                                totalHeapSizeExecutable\n                            \n                            \n                                    Private\n                                totalPhysicalSize\n                            \n                            \n                                    Private\n                                usedHeapSize\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getMetricList\n                            \n                            \n                                    Public\n                                getMetrics\n                            \n                            \n                                    Public\n                                removeTag\n                            \n                            \n                                    Public\n                                setGroup\n                            \n                            \n                                    Public\n                                setTag\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(name: string, sampleRate: number)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/V8MemoryMetrics.ts:171\n                            \n                        \n\n                \n                    \n                            Creates an instance of V8MemoryMetrics.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sampleRate\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            heapSizeLimit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        heapSizeLimit:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                    \n                        \n                            Default value : new SimpleGauge(\"heapSizeLimit\")\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:147\n                            \n                        \n\n                \n                    \n                        Maximum heap size.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            intervalRef\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        intervalRef:     NodeJS.Timer\n\n                    \n                \n                    \n                        \n                            Type :     NodeJS.Timer\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:171\n                            \n                        \n\n                \n                    \n                        The timer reference from the scheduler.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            mallocedMemory\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        mallocedMemory:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                    \n                        \n                            Default value : new SimpleGauge(\"mallocedMemory\")\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:155\n                            \n                        \n\n                \n                    \n                        Allocated memory.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            metrics\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        metrics:     Metric[]\n\n                    \n                \n                    \n                        \n                            Type :     Metric[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:91\n                            \n                        \n\n                \n                    \n                        Contains ll the metrics in this metric-set.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            peakMallocedMemory\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        peakMallocedMemory:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                    \n                        \n                            Default value : new SimpleGauge(\"peakMallocedMemory\")\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:163\n                            \n                        \n\n                \n                    \n                        Maximum allocated memory.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            spaces\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        spaces:     Map\n\n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:99\n                            \n                        \n\n                \n                    \n                        Stores the size gauges for different speces.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            totalAvailableSize\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        totalAvailableSize:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                    \n                        \n                            Default value : new SimpleGauge(\"totalAvailableSize\")\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:115\n                            \n                        \n\n                \n                    \n                        Total availabel size.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            totalHeapSize\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        totalHeapSize:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                    \n                        \n                            Default value : new SimpleGauge(\"totalHeapSize\")\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:107\n                            \n                        \n\n                \n                    \n                        Total heap size.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            totalHeapSizeExecutable\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        totalHeapSizeExecutable:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                    \n                        \n                            Default value : new SimpleGauge(\"totalHeapSizeExecutable\")\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:131\n                            \n                        \n\n                \n                    \n                        Total heap size for executable code.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            totalPhysicalSize\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        totalPhysicalSize:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                    \n                        \n                            Default value : new SimpleGauge(\"totalPhysicalSize\")\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:123\n                            \n                        \n\n                \n                    \n                        Total physical size.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            usedHeapSize\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        usedHeapSize:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                    \n                        \n                            Default value : new SimpleGauge(\"usedHeapSize\")\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:139\n                            \n                        \n\n                \n                    \n                        Used heap size.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMetricList\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMetricList()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:251\n                            \n                        \n\n\n                \n                    \n                            Gets all metrics.\n\n\n                            \n                            \n                            \n                                Returns :     Metric[]\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMetrics\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMetrics()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:239\n                            \n                        \n\n\n                \n                    \n                            Gets all metrics.\n\n\n                            \n                            \n                            \n                                Returns :     Map\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            removeTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        removeTag(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:314\n                            \n                        \n\n\n                \n                    \n                            Removes the specified tag from this metric-set and all contained metrics accordingly.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setGroup(group: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:261\n                            \n                        \n\n\n                \n                    \n                            Sets the group of this metric-set as well as all contained metrics.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setTag(name: string, value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:288\n                            \n                        \n\n\n                \n                    \n                            Sets the tags of this metric-set all contained metrics accordingly.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            stop\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        stop()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:229\n                            \n                        \n\n\n                \n                    \n                            Stops the recording of memory metrics.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport {\n    BaseMetric,\n    Metric,\n    MetricSet,\n    SimpleGauge,\n} from \"inspector-metrics\";\nimport * as v8 from \"v8\";\n\n/**\n * A collection of {@link SimpleGauge} values for space metrics.\n *\n * @export\n * @class SpaceHistory\n */\nexport class SpaceHistory {\n\n    /**\n     * Total size.\n     *\n     * @type {SimpleGauge}\n     * @memberof SpaceHistory\n     */\n    public size: SimpleGauge;\n    /**\n     * Used size.\n     *\n     * @type {SimpleGauge}\n     * @memberof SpaceHistory\n     */\n    public usedSize: SimpleGauge;\n    /**\n     * Available size.\n     *\n     * @type {SimpleGauge}\n     * @memberof SpaceHistory\n     */\n    public availableSize: SimpleGauge;\n    /**\n     * Physical size.\n     *\n     * @type {SimpleGauge}\n     * @memberof SpaceHistory\n     */\n    public physicalSize: SimpleGauge;\n\n    /**\n     * Creates an instance of SpaceHistory.\n     *\n     * @param {string} spaceName\n     * @param {Metric[]} metrics\n     * @memberof SpaceHistory\n     */\n    public constructor(spaceName: string, metrics: Metric[]) {\n        this.size = new SimpleGauge(\"spaceSize\");\n        this.usedSize = new SimpleGauge(\"spaceUsedSize\");\n        this.availableSize = new SimpleGauge(\"spaceAvailableSize\");\n        this.physicalSize = new SimpleGauge(\"spacePhysicalSize\");\n\n        this.size.setTag(\"space\", spaceName);\n        this.usedSize.setTag(\"space\", spaceName);\n        this.availableSize.setTag(\"space\", spaceName);\n        this.physicalSize.setTag(\"space\", spaceName);\n\n        metrics.push(this.size);\n        metrics.push(this.usedSize);\n        metrics.push(this.availableSize);\n        metrics.push(this.physicalSize);\n    }\n\n}\n\n/**\n * Metric set with values related to the memory nodejs uses.\n *\n * @export\n * @class V8MemoryMetrics\n * @extends {BaseMetric}\n * @implements {MetricSet}\n */\nexport class V8MemoryMetrics extends BaseMetric implements MetricSet {\n\n    /**\n     * Contains ll the metrics in this metric-set.\n     *\n     * @private\n     * @type {Metric[]}\n     * @memberof V8MemoryMetrics\n     */\n    private metrics: Metric[] = [];\n    /**\n     * Stores the size gauges for different speces.\n     *\n     * @private\n     * @type {Map}\n     * @memberof V8MemoryMetrics\n     */\n    private spaces: Map = new Map();\n    /**\n     * Total heap size.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private totalHeapSize: SimpleGauge = new SimpleGauge(\"totalHeapSize\");\n    /**\n     * Total availabel size.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private totalAvailableSize: SimpleGauge = new SimpleGauge(\"totalAvailableSize\");\n    /**\n     * Total physical size.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private totalPhysicalSize: SimpleGauge = new SimpleGauge(\"totalPhysicalSize\");\n    /**\n     * Total heap size for executable code.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private totalHeapSizeExecutable: SimpleGauge = new SimpleGauge(\"totalHeapSizeExecutable\");\n    /**\n     * Used heap size.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private usedHeapSize: SimpleGauge = new SimpleGauge(\"usedHeapSize\");\n    /**\n     * Maximum heap size.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private heapSizeLimit: SimpleGauge = new SimpleGauge(\"heapSizeLimit\");\n    /**\n     * Allocated memory.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private mallocedMemory: SimpleGauge = new SimpleGauge(\"mallocedMemory\");\n    /**\n     * Maximum allocated memory.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private peakMallocedMemory: SimpleGauge = new SimpleGauge(\"peakMallocedMemory\");\n    /**\n     * The timer reference from the scheduler.\n     *\n     * @private\n     * @type {NodeJS.Timer}\n     * @memberof V8MemoryMetrics\n     */\n    private intervalRef: NodeJS.Timer;\n\n    /**\n     * Creates an instance of V8MemoryMetrics.\n     *\n     * @param {string} name\n     * @param {number} [sampleRate=1000]\n     * @memberof V8MemoryMetrics\n     */\n    public constructor(name: string, sampleRate = 1000) {\n        super();\n        this.name = name;\n\n        this.metrics.push(this.totalHeapSize);\n        this.metrics.push(this.totalPhysicalSize);\n        this.metrics.push(this.totalAvailableSize);\n        this.metrics.push(this.totalHeapSizeExecutable);\n        this.metrics.push(this.usedHeapSize);\n        this.metrics.push(this.heapSizeLimit);\n        this.metrics.push(this.mallocedMemory);\n        this.metrics.push(this.peakMallocedMemory);\n\n        this.spaces.set(\"new_space\", new SpaceHistory(\"new_space\", this.metrics));\n        this.spaces.set(\"old_space\", new SpaceHistory(\"old_space\", this.metrics));\n        this.spaces.set(\"code_space\", new SpaceHistory(\"code_space\", this.metrics));\n        this.spaces.set(\"map_space\", new SpaceHistory(\"map_space\", this.metrics));\n        this.spaces.set(\"large_object_space\", new SpaceHistory(\"large_object_space\", this.metrics));\n\n        this.intervalRef = global.setInterval(() => {\n            const heapSpaceStatistics = v8.getHeapSpaceStatistics();\n            const heapStatistics = v8.getHeapStatistics();\n\n            this.totalHeapSize.setValue(heapStatistics.total_heap_size);\n            this.totalPhysicalSize.setValue(heapStatistics.total_physical_size);\n            this.totalAvailableSize.setValue(heapStatistics.total_available_size);\n            this.totalHeapSizeExecutable.setValue(heapStatistics.total_heap_size_executable);\n            this.usedHeapSize.setValue(heapStatistics.used_heap_size);\n            this.heapSizeLimit.setValue(heapStatistics.heap_size_limit);\n            this.mallocedMemory.setValue(heapStatistics.heap_size_limit);\n            this.peakMallocedMemory.setValue(heapStatistics.heap_size_limit);\n\n            heapSpaceStatistics.forEach((heapSpaceStatistic) => {\n                if (this.spaces.has(heapSpaceStatistic.space_name)) {\n                    const history = this.spaces.get(heapSpaceStatistic.space_name);\n                    history.availableSize.setValue(heapSpaceStatistic.space_available_size);\n                    history.physicalSize.setValue(heapSpaceStatistic.physical_space_size);\n                    history.size.setValue(heapSpaceStatistic.space_size);\n                    history.usedSize.setValue(heapSpaceStatistic.space_used_size);\n                }\n            });\n        }, sampleRate);\n    }\n\n    /**\n     * Stops the recording of memory metrics.\n     *\n     * @memberof V8MemoryMetrics\n     */\n    public stop(): void {\n        this.intervalRef.unref();\n    }\n\n    /**\n     * Gets all metrics.\n     *\n     * @returns {Map}\n     * @memberof V8MemoryMetrics\n     */\n    public getMetrics(): Map {\n        const map: Map = new Map();\n        this.metrics.forEach((metric) => map.set(metric.getName(), metric));\n        return map;\n    }\n\n    /**\n     * Gets all metrics.\n     *\n     * @returns {Metric[]}\n     * @memberof V8MemoryMetrics\n     */\n    public getMetricList(): Metric[] {\n        return this.metrics;\n    }\n\n    /**\n     * Sets the group of this metric-set as well as all contained metrics.\n     *\n     * @param {string} group\n     * @memberof V8MemoryMetrics\n     */\n    public setGroup(group: string): void {\n        this.group = group;\n\n        this.totalHeapSize.setGroup(group);\n        this.totalAvailableSize.setGroup(group);\n        this.totalPhysicalSize.setGroup(group);\n        this.totalHeapSizeExecutable.setGroup(group);\n        this.usedHeapSize.setGroup(group);\n        this.heapSizeLimit.setGroup(group);\n        this.mallocedMemory.setGroup(group);\n        this.peakMallocedMemory.setGroup(group);\n\n        this.spaces.forEach((history) => {\n            history.availableSize.setGroup(group);\n            history.physicalSize.setGroup(group);\n            history.size.setGroup(group);\n            history.usedSize.setGroup(group);\n        });\n    }\n\n    /**\n     * Sets the tags of this metric-set all contained metrics accordingly.\n     *\n     * @param {string} name\n     * @param {string} value\n     * @memberof V8MemoryMetrics\n     */\n    public setTag(name: string, value: string): void {\n        this.tags.set(name, value);\n\n        this.totalHeapSize.setTag(name, value);\n        this.totalAvailableSize.setTag(name, value);\n        this.totalPhysicalSize.setTag(name, value);\n        this.totalHeapSizeExecutable.setTag(name, value);\n        this.usedHeapSize.setTag(name, value);\n        this.heapSizeLimit.setTag(name, value);\n        this.mallocedMemory.setTag(name, value);\n        this.peakMallocedMemory.setTag(name, value);\n\n        this.spaces.forEach((history) => {\n            history.availableSize.setTag(name, value);\n            history.physicalSize.setTag(name, value);\n            history.size.setTag(name, value);\n            history.usedSize.setTag(name, value);\n        });\n    }\n\n    /**\n     * Removes the specified tag from this metric-set and all contained metrics accordingly.\n     *\n     * @param {string} name\n     * @memberof V8MemoryMetrics\n     */\n    public removeTag(name: string): void {\n        this.tags.delete(name);\n\n        this.totalHeapSize.removeTag(name);\n        this.totalAvailableSize.removeTag(name);\n        this.totalPhysicalSize.removeTag(name);\n        this.totalHeapSizeExecutable.removeTag(name);\n        this.usedHeapSize.removeTag(name);\n        this.heapSizeLimit.removeTag(name);\n        this.mallocedMemory.removeTag(name);\n        this.peakMallocedMemory.removeTag(name);\n\n        this.spaces.forEach((history) => {\n            history.availableSize.removeTag(name);\n            history.physicalSize.removeTag(name);\n            history.size.removeTag(name);\n            history.usedSize.removeTag(name);\n        });\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/V8ProcessMetrics.html":{"url":"classes/V8ProcessMetrics.html","title":"class - V8ProcessMetrics","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  V8ProcessMetrics\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/V8ProcessMetrics.ts\n        \n\n            \n                Description\n            \n            \n                Metric set with values related to the nodejs process.\n\n            \n\n            \n                Extends\n            \n            \n                    BaseMetric\n            \n\n            \n                Implements\n            \n            \n                        MetricSet\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeHandles\n                            \n                            \n                                    Private\n                                activeRequests\n                            \n                            \n                                    Private\n                                cpuSystemUsage\n                            \n                            \n                                    Private\n                                cpuTotalUsage\n                            \n                            \n                                    Private\n                                cpuUserUsage\n                            \n                            \n                                    Private\n                                lastUsage\n                            \n                            \n                                    Private\n                                metrics\n                            \n                            \n                                    Private\n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getMetricList\n                            \n                            \n                                    Public\n                                getMetrics\n                            \n                            \n                                    Public\n                                removeTag\n                            \n                            \n                                    Public\n                                setGroup\n                            \n                            \n                                    Public\n                                setTag\n                            \n                            \n                                    Public\n                                stop\n                            \n                            \n                                    Private\n                                update\n                            \n                            \n                                    Private\n                                updateActiveHandles\n                            \n                            \n                                    Private\n                                updateActiveRequests\n                            \n                            \n                                    Private\n                                updateCpuUsage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(name: string, scheduler: Scheduler)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/V8ProcessMetrics.ts:85\n                            \n                        \n\n                \n                    \n                            Creates an instance of V8ProcessMetrics.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        scheduler\n                                                  \n                                                        \n                                                                    Scheduler\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            activeHandles\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        activeHandles:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:37\n                            \n                        \n\n                \n                    \n                        Tracks the active handle count.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            activeRequests\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        activeRequests:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:45\n                            \n                        \n\n                \n                    \n                        Tracks the active request count.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            cpuSystemUsage\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cpuSystemUsage:     MonotoneCounter\n\n                    \n                \n                    \n                        \n                            Type :     MonotoneCounter\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:53\n                            \n                        \n\n                \n                    \n                        Tracks the cpu system usage.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            cpuTotalUsage\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cpuTotalUsage:     MonotoneCounter\n\n                    \n                \n                    \n                        \n                            Type :     MonotoneCounter\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:61\n                            \n                        \n\n                \n                    \n                        Tracks the cpu total usage.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            cpuUserUsage\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cpuUserUsage:     MonotoneCounter\n\n                    \n                \n                    \n                        \n                            Type :     MonotoneCounter\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:69\n                            \n                        \n\n                \n                    \n                        Tracks the cpu user usage.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            lastUsage\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        lastUsage:     NodeJS.CpuUsage\n\n                    \n                \n                    \n                        \n                            Type :     NodeJS.CpuUsage\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:85\n                            \n                        \n\n                \n                    \n                        Last cpu usage object.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            metrics\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        metrics:     Metric[]\n\n                    \n                \n                    \n                        \n                            Type :     Metric[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:29\n                            \n                        \n\n                \n                    \n                        Contains ll the metrics in this metric-set.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            timer\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        timer:     NodeJS.Timer\n\n                    \n                \n                    \n                        \n                            Type :     NodeJS.Timer\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:77\n                            \n                        \n\n                \n                    \n                        The timer reference from the scheduler.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMetricList\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMetricList()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:148\n                            \n                        \n\n\n                \n                    \n                            Gets all metrics.\n\n\n                            \n                            \n                            \n                                Returns :     Metric[]\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMetrics\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMetrics()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:136\n                            \n                        \n\n\n                \n                    \n                            Gets all metrics.\n\n\n                            \n                            \n                            \n                                Returns :     Map\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            removeTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        removeTag(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:191\n                            \n                        \n\n\n                \n                    \n                            Removes the specified tag from this metric-set and all contained metrics accordingly.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setGroup(group: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:158\n                            \n                        \n\n\n                \n                    \n                            Sets the group of this metric-set as well as all contained metrics.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setTag(name: string, value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:175\n                            \n                        \n\n\n                \n                    \n                            Sets the tags of this metric-set all contained metrics accordingly.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            stop\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        stop()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:124\n                            \n                        \n\n\n                \n                    \n                            Stops the recording of process metrics.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        update()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:201\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            updateActiveHandles\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        updateActiveHandles()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:207\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            updateActiveRequests\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        updateActiveRequests()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:214\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            updateCpuUsage\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        updateCpuUsage()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:221\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport {\n    BaseMetric,\n    Metric,\n    MetricSet,\n    MonotoneCounter,\n    Scheduler,\n    SimpleGauge,\n} from \"inspector-metrics\";\n\n/**\n * Metric set with values related to the nodejs process.\n *\n * @export\n * @class V8ProcessMetrics\n * @extends {BaseMetric}\n * @implements {MetricSet}\n */\nexport class V8ProcessMetrics extends BaseMetric implements MetricSet {\n\n    /**\n     * Contains ll the metrics in this metric-set.\n     *\n     * @private\n     * @type {Metric[]}\n     * @memberof V8ProcessMetrics\n     */\n    private metrics: Metric[] = [];\n    /**\n     * Tracks the active handle count.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8ProcessMetrics\n     */\n    private activeHandles: SimpleGauge;\n    /**\n     * Tracks the active request count.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8ProcessMetrics\n     */\n    private activeRequests: SimpleGauge;\n    /**\n     * Tracks the cpu system usage.\n     *\n     * @private\n     * @type {MonotoneCounter}\n     * @memberof V8ProcessMetrics\n     */\n    private cpuSystemUsage: MonotoneCounter;\n    /**\n     * Tracks the cpu total usage.\n     *\n     * @private\n     * @type {MonotoneCounter}\n     * @memberof V8ProcessMetrics\n     */\n    private cpuTotalUsage: MonotoneCounter;\n    /**\n     * Tracks the cpu user usage.\n     *\n     * @private\n     * @type {MonotoneCounter}\n     * @memberof V8ProcessMetrics\n     */\n    private cpuUserUsage: MonotoneCounter;\n    /**\n     * The timer reference from the scheduler.\n     *\n     * @private\n     * @type {NodeJS.Timer}\n     * @memberof V8ProcessMetrics\n     */\n    private timer: NodeJS.Timer;\n    /**\n     * Last cpu usage object.\n     *\n     * @private\n     * @type {NodeJS.CpuUsage}\n     * @memberof V8ProcessMetrics\n     */\n    private lastUsage: NodeJS.CpuUsage;\n\n    /**\n     * Creates an instance of V8ProcessMetrics.\n     *\n     * @param {string} name\n     * @param {Scheduler} [scheduler=setInterval]\n     * @memberof V8ProcessMetrics\n     */\n    public constructor(name: string, scheduler: Scheduler = setInterval) {\n        super();\n        this.name = name;\n\n        this.cpuSystemUsage = new MonotoneCounter(\"cpu_usage\", \"System CPU time spent in microseconds\");\n        this.cpuSystemUsage.setTag(\"type\", \"system\");\n\n        this.cpuTotalUsage = new MonotoneCounter(\"cpu_usage\", \"Total user and system CPU time spent in microseconds\");\n        this.cpuTotalUsage.setTag(\"type\", \"total\");\n\n        this.cpuUserUsage = new MonotoneCounter(\"cpu_usage\", \"User CPU time spent in microseconds\");\n        this.cpuUserUsage.setTag(\"type\", \"uesr\");\n\n        this.activeHandles = new SimpleGauge(\"active_handles\", \"Number of active handles\");\n        this.activeRequests = new SimpleGauge(\"active_requests\", \"Number of active requests\");\n\n        this.metrics.push(this.activeHandles);\n        this.metrics.push(this.activeRequests);\n        this.metrics.push(this.cpuSystemUsage);\n        this.metrics.push(this.cpuTotalUsage);\n        this.metrics.push(this.cpuUserUsage);\n\n        this.timer = scheduler(() => this.update(), 1000);\n    }\n\n    /**\n     * Stops the recording of process metrics.\n     *\n     * @memberof V8ProcessMetrics\n     */\n    public stop(): void {\n        if (this.timer) {\n            this.timer.unref();\n        }\n    }\n\n    /**\n     * Gets all metrics.\n     *\n     * @returns {Map}\n     * @memberof V8ProcessMetrics\n     */\n    public getMetrics(): Map {\n        const map: Map = new Map();\n        this.metrics.forEach((metric) => map.set(metric.getName(), metric));\n        return map;\n    }\n\n    /**\n     * Gets all metrics.\n     *\n     * @returns {Metric[]}\n     * @memberof V8ProcessMetrics\n     */\n    public getMetricList(): Metric[] {\n        return this.metrics;\n    }\n\n    /**\n     * Sets the group of this metric-set as well as all contained metrics.\n     *\n     * @param {string} group\n     * @memberof V8ProcessMetrics\n     */\n    public setGroup(group: string): void {\n        this.group = group;\n\n        this.activeHandles.setGroup(group);\n        this.activeRequests.setGroup(group);\n        this.cpuSystemUsage.setGroup(group);\n        this.cpuTotalUsage.setGroup(group);\n        this.cpuUserUsage.setGroup(group);\n    }\n\n    /**\n     * Sets the tags of this metric-set all contained metrics accordingly.\n     *\n     * @param {string} name\n     * @param {string} value\n     * @memberof V8ProcessMetrics\n     */\n    public setTag(name: string, value: string): void {\n        this.tags.set(name, value);\n\n        this.activeHandles.setTag(name, value);\n        this.activeRequests.setTag(name, value);\n        this.cpuSystemUsage.setTag(name, value);\n        this.cpuTotalUsage.setTag(name, value);\n        this.cpuUserUsage.setTag(name, value);\n    }\n\n    /**\n     * Removes the specified tag from this metric-set and all contained metrics accordingly.\n     *\n     * @param {string} name\n     * @memberof V8ProcessMetrics\n     */\n    public removeTag(name: string): void {\n        this.tags.delete(name);\n\n        this.activeHandles.removeTag(name);\n        this.activeRequests.removeTag(name);\n        this.cpuSystemUsage.removeTag(name);\n        this.cpuTotalUsage.removeTag(name);\n        this.cpuUserUsage.removeTag(name);\n    }\n\n    private update() {\n        this.updateActiveHandles();\n        this.updateActiveRequests();\n        this.updateCpuUsage();\n    }\n\n    private updateActiveHandles() {\n        const p = process as any;\n        if (typeof p._getActiveHandles === \"function\") {\n            this.activeHandles.setValue(p._getActiveHandles().length);\n        }\n    }\n\n    private updateActiveRequests() {\n        const p = process as any;\n        if (typeof p._getActiveRequests === \"function\") {\n            this.activeRequests.setValue(p._getActiveRequests().length);\n        }\n    }\n\n    private updateCpuUsage() {\n        const cpuUsage = process.cpuUsage();\n        const userUsageMicros = cpuUsage.user - this.lastUsage.user;\n        const systemUsageMicros = cpuUsage.system - this.lastUsage.system;\n\n        this.lastUsage = cpuUsage;\n\n        this.cpuSystemUsage.increment(systemUsageMicros);\n        this.cpuTotalUsage.increment(userUsageMicros + systemUsageMicros);\n        this.cpuUserUsage.increment(userUsageMicros);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/metrics/V8EventLoop.ts\n            \n            \n                class\n            \n            \n                V8EventLoop\n            \n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                lib/metrics/V8GCMetrics.ts\n            \n            \n                class\n            \n            \n                V8GCMetrics\n            \n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                lib/metrics/V8GCMetrics.ts\n            \n            \n                variable\n            \n            \n                GC\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/metrics/V8MemoryMetrics.ts\n            \n            \n                class\n            \n            \n                SpaceHistory\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                lib/metrics/V8MemoryMetrics.ts\n            \n            \n                class\n            \n            \n                V8MemoryMetrics\n            \n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                lib/metrics/V8ProcessMetrics.ts\n            \n            \n                class\n            \n            \n                V8ProcessMetrics\n            \n            \n                80 %\n                (16/20)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            gc-stats : ^1.2.0\n        \n            inspector-metrics : ^1.11.0\n        \n            source-map-support : ^0.5.9\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ninspector-vm\nNodeJS VM Metric Collector\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\ninstall\nThis library is meant to be used with typescript / nodejs.\nnpm install --save inspector-vm\nbasic usage\nimport { MetricRegistry } from \"inspector-metrics\";\nimport { V8MemoryMetrics, V8GCMetrics } from \"inspector-vm\";\n\n// get a registry\nconst registry: MetricRegistry = ...;\n\n// instance the memory metric, contains\n//   - space statistics\n//   - memory statistics\nconst memoryMetrics: V8MemoryMetrics = new V8MemoryMetrics(\"v8\", registry.getDefaultClock());\n//   - gc statistics\nconst gcMetrics: V8GCMetrics = new V8GCMetrics(\"gc\", registry.getDefaultClock());\n\n// metric is registered und the name \"v8\"\n// defaults to group \"gc\"\nregistry.register(memoryMetrics.getName(), memoryMetrics);\n\n// setup reporter ...\n\n// note that unstopped metrics can cause the application to keep running\ngcMetrics.stop();\nmemoryMetrics.stop();License\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2017 \nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n        \n            \n                \n                        /mnt/c/git/inspector-vm/lib/metrics/V8GCMetrics.ts\n            \n            \n                80 %\n                (49/61)\n            \n            \n                0 %\n                (0/5)\n            \n            \n                89 %\n                (8/9)\n            \n            \n                80 %\n                (48/60)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-vm/lib/metrics/V8MemoryMetrics.ts\n            \n            \n                84 %\n                (91/108)\n            \n            \n                33 %\n                (1/3)\n            \n            \n                86 %\n                (12/14)\n            \n            \n                84 %\n                (90/107)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GC   (lib/.../V8GCMetrics.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/metrics/V8GCMetrics.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GC\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        GC:     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"gc-stats\")\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
